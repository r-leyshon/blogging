{
  "hash": "d1c750f6f94a671a8add3a37abc18be3",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Analyse a Cycling Network with r<sup>5</sup>py\nauthor: Rich Leyshon\ndate: February 03 2024\ndescription: Using r<sup>5</sup>py to analyse service coverage in the London's Boris Bike network.\ncategories:\n  - Tutorial\n  - Transport Modelling\n  - REST API\n  - Web data\n  - Geospatial\nimage: 'https://images.pixexid.com/a-dynamic-image-of-a-cyclist-her-face-focused-and-determined-captured-mid-peda-cpglmien.jpeg?h=699&amp;q=70'\nimage-alt: 'A dynamic image of a cyclist, her face focused and determined, captured mid-pedal against the backdrop of a bustling city by [Ralph](https://pixexid.com/profile/cjxrsxsl7000008s6h21jecoe)'\ntoc: true\n---\n\n<figure class=center>\n  <img class=\"shaded_box\" width=\"400px\" src=\"https://images.pixexid.com/a-dynamic-image-of-a-cyclist-her-face-focused-and-determined-captured-mid-peda-cpglmien.jpeg?h=699&amp;q=70\"></img>\n  <figcaption style=\"text-align:center;\">Creative commons license, created by [Ralph](https://pixexid.com/profile/cjxrsxsl7000008s6h21jecoe)</figcaption>\n</figure>\n\n## Introduction\n\n[r<sup>5</sup>py is a relatively new transport modelling package](https://r5py.readthedocs.io/en/stable/)\navailable on PyPI. It provides convenient wrappers to\n[Conveyal's r<sup>5</sup> Java library](https://github.com/conveyal/r5), a\nperformant routing engine originating from the ubiquitous Open Trip Planner\n(OTP). Whereas r<sup>5</sup>py may not be as feature-rich as OTP, its unique\nstrength is in the production of origin:destination matrices at scale. This is\nimportant if the intention is to produce stable statistics based on routing\nalgorithms, where the idiosyncracies of local transport service availability\nmeans that departure times can have a significant impact upon overall journey\nduration.\n\nIn summary, r<sup>5</sup>py achieves stable statistics by calculating travel\ntimes over multiple journeys within a time window, returning insightful\nsummaries such as the median duration required to travel from point A to B.\n\n:::{.callout-caution collapse=\"true\"}\n\n### A Note on the Purpose\n\nThis tutorial aims to familiarise the reader with r<sup>5</sup>py and how it\nintegrates with the python geospatial ecosystem of packages. This article is\nnot to be used to attempt to infer service quality outcomes or to inform policy\ndecisions. Limitations of this analysis and suggested improvements will be\ndiscussed throughout.\n\n:::\n\n### Intended Audience\n\nExperienced python practitioners familiar with the typical python GIS stack, eg\ngeopandas, shapely, fiona and folium. Familiarity with r<sup>5</sup>py and\nrouting operations is not required.\n\n### Outcomes\n\n* Ingest London bike charging station locations.\n* Visualise charging stations in an interactive hex map.\n* Create a naive point plane of destinations.\n* Check that the point plane is large enough to accommodate station locations.\n* Calculate origin:destination travel time matrix, by cycling modality and \nwith a maximum journey time of 30 minutes.\n* Engineer features to help analyse the cycling network accessibility.\n* Visualise the cycling network coverage and the most remote points within that\narea.\n\n### What You'll Need:\n\n- [ ] Conda or miniconda\n- [ ] pip package manager\n- [ ] Ability to install Java Development Kit\n- [ ] Ability to request from Transport for London api\n- [ ] Tutorial compatible with macos. `subprocess` calls may require adaptation\nfor other operating systems.\n\n```{.python filename=requirements.txt eval=false}\ncontextily\ngeopandas\nmatplotlib\npydeck\npyprojroot\nr5py\nrequests\nscikit-learn\n\n```\n### Getting Started\n\nIt is required to configure a Java Virtual Machine for this tutorial. The\ntransport routing depends on this. Please consult the r<sup>5</sup>py\ninstallation documentation @r5pyInstallation for guidance.\n\n## London Cycle Station Service Coverage\n\nStart by loading the required packages.\n\n::: {#b8851f90 .cell execution_count=1}\n``` {.python .cell-code}\nimport datetime\nimport os\nimport subprocess\nimport tempfile \n\nimport contextily as ctx\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport pydeck as pdk\nimport pyproj\nfrom pyprojroot import here\nimport r5py\nimport requests\nfrom sklearn import preprocessing\nfrom shapely.geometry import Polygon\n```\n:::\n\n\n### Ingest the Street Network Data\n\nFirstly, we must acquire information about the transport network. There are\na few sources of this, but we shall use the\n[BBBikes](https://download.bbbike.org/osm/bbbike/) website to ingest\nLondon-specific open street map extracts. The required data should be in\nprotocolbuffer (.pbf) format.\n\n#### Exercise 1\n\nFind the appropriate url that points to the london.osm.pbf file. Ingest the\ndata and store at an appropriate location.\n\n::: {.panel-tabset}\n\n##### Hint\n\n::: {.callout-tip collapse=\"true\"}\n## Click to expand hint\nEither using python requests or subprocess with the `curl` command, request\nthe url of the pbf file and output the response to a data folder.\n\n:::\n\n##### Solution\n\n::: {#d107dcfa .cell execution_count=2}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show Solution\"}\nosm_pth = here(\"data/london.osm.pbf\")\n\n# tmp = tempfile.TemporaryDirectory()\n# subprocess.run(\n#     [\n#         \"curl\",\n#         \"https://download.bbbike.org/osm/bbbike/London/London.osm.pbf\",\n#         \"-o\",\n#         os.path.join(tmp.name, \"london.osm.pbf\"),\n#     ]\n# )\n# temp write to file to avoid repeat ingests\n\nif not os.path.exists(osm_pth):\n  subprocess.run(\n      [\n          \"curl\",\n          \"https://download.bbbike.org/osm/bbbike/London/London.osm.pbf\",\n          \"-o\",\n          osm_pth,\n      ]\n  )\n```\n:::\n\n\n:::\n\n### Ingest the Bike Charging Station Locations\n\n#### Exercise 2\n\nTo get data about the bike charging stations in London, we will query\n[Transport for London's BikePoint API](https://api.tfl.gov.uk/).\n\n* Explore the site and find the correct endpoint to query. \n* The tutorial requires the following fields: station ID, the human-readable\nname, latitude and longitude for each available station.\n* Store the data in a geopandas geodataframe with the appropriate coordinate\nreference system.\n* Inspect the head of the geodataframe.\n\n::: {.panel-tabset}\n\n##### Hint\n\n::: {.callout-tip collapse=\"true\"}\n## Click to expand hint\n\n1. Using the resuests package, send a get request to the endpoint.\n2. Store the required fields in a list: \"id\", \"commonName\", \"lat\", \"lon\".\n3. Check that the response returned HTTP status 200. If True, get the content\nin JSON format.\n4. Create an empty list to store the station data.\n5. Iterate through the content dictionaries. If a key is present within the\nrequired fields, store the key and value within a temporary dictionary.\n6. Append the dictionary of required fields and their values to the list of\nstations.\n7. Convert the list of dictionaries to a pandas dataframe. Then convert this\nto a geopandas geodataframe, using the coordinate reference system \"EPSG:4326\".\nAs we have lat and lon in seperate columns, use geopandas `points_from_xy()`,\nensuring you pass values in the order of longitude, latitude.\n8. Print out the head of the stations gdf.\n\n:::\n\n##### Solution\n\n::: {#1ad22fa2 .cell execution_count=3}\n``` {.python .cell-code}\nENDPOINT = \"https://api.tfl.gov.uk/BikePoint/\"\nresp = requests.get(ENDPOINT)\nif resp.ok:\n    content = resp.json()\nelse:\n    raise requests.exceptions.HTTPError(\n        f\"{resp.status_code}: {resp.reason}\"\n    )\n\nneeded_keys = [\"id\", \"commonName\", \"lat\", \"lon\"]\nall_stations = list()\nfor i in content:\n    node_dict = dict()\n    for k, v in i.items():\n        if k in needed_keys:\n            node_dict[k] = v\n    all_stations.append(node_dict)\n\nstations = pd.DataFrame(all_stations)\nstations_gdf = gpd.GeoDataFrame(\n    stations,\n    geometry=gpd.points_from_xy(stations[\"lon\"], stations[\"lat\"]),\n    crs=4326,\n)\nstations_gdf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>commonName</th>\n      <th>lat</th>\n      <th>lon</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>BikePoints_1</td>\n      <td>River Street , Clerkenwell</td>\n      <td>51.529163</td>\n      <td>-0.109970</td>\n      <td>POINT (-0.10997 51.52916)</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>BikePoints_2</td>\n      <td>Phillimore Gardens, Kensington</td>\n      <td>51.499606</td>\n      <td>-0.197574</td>\n      <td>POINT (-0.19757 51.49961)</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>BikePoints_3</td>\n      <td>Christopher Street, Liverpool Street</td>\n      <td>51.521283</td>\n      <td>-0.084605</td>\n      <td>POINT (-0.08460 51.52128)</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>BikePoints_4</td>\n      <td>St. Chad's Street, King's Cross</td>\n      <td>51.530059</td>\n      <td>-0.120973</td>\n      <td>POINT (-0.12097 51.53006)</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>BikePoints_5</td>\n      <td>Sedding Street, Sloane Square</td>\n      <td>51.493130</td>\n      <td>-0.156876</td>\n      <td>POINT (-0.15688 51.49313)</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n\n::: {#804dcea0 .cell execution_count=4}\n``` {.python .cell-code}\n# Tidy up\n# tmp.cleanup()\n```\n:::\n\n\n### Tips\n\n* When encountering issues with quarto render, it can be informative to examine\n\n## Conclusion\n\nThis article has walked the reader through setting up a basic quarto project,\n\n<p id=fin><i>fin!</i></p>\n\n",
    "supporting": [
      "09-cycling-network-r5py_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}