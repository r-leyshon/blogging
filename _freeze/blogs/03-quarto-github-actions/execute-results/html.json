{
  "hash": "7da46a2f4224c2d5ad49cd4c1f83b352",
  "result": {
    "markdown": "---\ntitle: \"How to Automate Quarto Builds with GitHub Actions\"\nauthor: \"Rich Leyshon\"\ndate: last-modified\ndescription: \"Setting up a website with Quarto? Want to automate the website\nbuild and publication with GitHub Actions? Could you use a quick guide? I've\ngot your back.\"\ncategories:         # delete categories as appropriate. using https://diataxis.fr/ documentation definitions.\n    - How-to   # task-oriented\nimage: https://i1.pickpik.com/photos/452/586/379/code-html-digital-coding-preview.jpg # creative commons\nimage-alt: \"HTML code.\"\ntoc: true\nformat:\n  html:\n    css: /./www/styles.css\n---\n\n## Assumptions\n\n* You're set up with a [GitHub account](https://github.com/).\n* You're able to run git commands @GitHubGit from a command line interface (CLI).\n* You've installed quarto. @HelloQuarto\n* You've a preferred text editor installed, eg Visual Studio Code, Atom or\nsimilar.\n\nThis guide is based on the useful quarto continuous integration documentation\n@quartoCIdocs and the examples provided within the Quarto CI GitHub repository\n@QuartoDevCI.\n\n## Setting up CI for Quarto\n\n### In the GitHub User Interface\n\n1. Create a repository.\n2. Copy the clone url.\n\n### In the CLI\n3. `cd` to wherever you would like to keep your local clone.\n4. `git clone <INSERT REPO URL>`\n5. `cd <INSERT REPO PATH>`\n6. `touch .github/workflows/publish-quarto.yml`\n7. `touch index.qmd`\n8. `touch .nojekyll`\n9. `touch _quarto.yml`\n\n### In the text editor \n10. Copy and paste the below into the document (you may need to enable viewing\nhidden files on your system - command + shift + . On macOS):\n\n```YML\nname: Render and Publish\non:\n  push:\n    branches:\n      - main  # changes pushed to this branch will trigger a build.\n\njobs:\n  build-deploy:\n      runs-on: ubuntu-latest\n      permissions:\n        contents: write\n      steps:\n        - name: Check out repository\n          uses: actions/checkout@v3\n          \n        - name: Set up Quarto\n          uses: quarto-dev/quarto-actions/setup@v2\n          with:\n            version: 1.3.340\n\n        - name: Publish to GitHub Pages (and render)\n          uses: quarto-dev/quarto-actions/publish@v2\n          with:\n            target: gh-pages # renderred html files will be pushed here\n          env:\n            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # this secret is always available for github actions\n\n```\n\n11. Copy paste the below into the index.qmd, using your preferred text editor:\n\n```YML\n\n\n---\ntitle: Hello Quarto CI\ndate: last-modified\nresources:\n  - .nojekyll\n---\nSetting up CI for quarto website build & publish.\n```\n\n12. Copy paste the following into _quarto.yml\n\n```YML\nproject:\n  type: website\n  output-dir: docs\nexecute:\n  freeze: auto\nformat: html\n\n```\n### Back in the CLI\n\n13. At the project root: `quarto render`. This will make a docs folder with\nyour rendered website, a directory called index_files with more site\ndependencies and a .gitignore file.\n14. `echo /docs/ >> .gitignore `\n15. `echo /index_files/ >> .gitignore`\n16. `git status` should look like this:\n\n\n```{yml code-copy='false'}\nOn branch main\nYour branch is up to date with 'origin/main'.\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n        .github/workflows/publish-quarto.yml\n        .gitignore\n        _quarto.yml\n        index.qmd\n```\n\n\n17. `git add .`\n18. `git commit -m \"Configure quarto\"`\n19. `git push`\n\n### Back to the Web Browser\n20. If the push was successful, navigate to your repository\n21. Click on the drop down arrow next to main branch\n22. Click on 'view all branches'\n23. Click the 'new branch' button\n24. Create the branch `gh-pages`\n25. Click on 'settings' in the top ribbon of the repo site\n26. Click on 'Pages' in the menu to the left\n27. Check that your GitHub Pages is setup is Build and deployment > Source >\nDeploy from a branch\n28. Check that the Branch setup is gh-pages /root\n29. After the CI has finished building, you can click on the url that appears\nat the top of this page under “GitHub Pages” to check that the site has been\ndeployed properly\n\n## Creating a Workflow Build Status Badge\nUse the following format to create a workflow build status badge in your\nreadme: `https://github.com/OWNER/REPOSITORY/actions/workflows/WORKFLOW-FILE/badge.svg`   \nFor example: `https://github.com/r-leyshon/quarto-ci-example/actions/workflows/publish-quarto.yml/badge.svg`    \nFinally, embed the url in the src of a markdown image, like: \n`![example workflow](https://github.com/github/docs/actions/workflows/main.yml/badge.svg)`\n\n<p id=fin><i>fin!</i></p>\n\n",
    "supporting": [
      "03-quarto-github-actions_files"
    ],
    "filters": [],
    "includes": {}
  }
}