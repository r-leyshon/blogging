{
  "hash": "54b9e7bd8e58b4226a14b94fa5570557",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Automated CodeCov reports with GitHub Actions\"\nauthor: \"Rich Leyshon\"\ndate: \"November 29 2024\"\ndescription: \"A quick How-to reference for uploading python `coverage` reports\"\ncategories:\n    - How-to\n    - CodeCov\n    - Coverage\n    - CI:CD\nimage: https://i.imgur.com/H2ljge8.jpeg\nimage-alt: \"Some image.\"\ntoc: true\ncss: /./www/17-quarto-comments/styles.css\ncode-annotations: select\n---\n\n<img class=shaded_box src=https://i.imgur.com/H2ljge8.jpeg alt=\"Some image.\" style=\"display:block;margin-left:auto;margin-right:auto;width:60%;border:none;\">\n\n## Introduction\n\n[CodeCov](https://about.codecov.io/) is an online service that allows you\nto generate free coverage reports for your repositories. You usually\ngenerate coverage reports as part of your CI workflow. Uploading these\nresults to the CodeCov service allows centralised tracking of code coverage\ntrends, various interactive visuals and the all important coverage shield(!)\n\n### Intended Audience\n\nPython developers who need to quickly get coverage reporting set up so they\ncan get on with the real work.\n\n:::{.callout-important}\n\nI have included screengrabs of things where possible. Please note that\nsites like GitHub change their interface from time to time.\n:::\n\n### Requirements\n\n\n```{abc filename=\"requirements.txt\"}\ncoverage\npytest\n```\n\n- A GitHub account\n- A repo with some code\n\n## Method\n\n1. Login to the\n<a href=https://about.codecov.io/ target=_blank>CodeCov Service</a> by\naccessing the login button at the top right of the screen. I suggest\nselecting the GitHub option for login. You will be asked to authenticate\nwith GitHub if you do so.\n2. If creating your account, you will be prompted about\n<a href=https://about.codecov.io/pricing/ target=_blank>the type of account</a>\nthat you need. I would suggest for most users **and** GitHub organisation\nmembers, a personal free account is all that you need.\n3. Search for the repo that you would like coverage reports for. If the\nrepo does not appear, try clicking refresh. If the repo belongs to an\norganisation, click on the drop-down menu to the top-left of the screen, \nhighlighted in red in the image below. \n\n:::{.callout-note collapse=\"true\"}\n\n### Org repo not appearing? (Click to expand)\n\nSome organisations may not allow CodeCov global access to its repositories.\nIf this is the case, you will need to ask an organisation owner to check a\nbox allowing codecov read & write access to the repo. This is done from the\norganisation's homepage > Settings > Third Party Access > GitHub Apps >\nCodecov > Configure > Repository access > Only select repositories >\nSelect repositories dropdown.\n\n:::\n\n4. Once found, click on the blue configure button. There are various\noptions on the next screen for selecting your CI provider and coverage\nsource. Ignore them and locate the `CODECOV_TOKEN` value. Copy it to your\nclipboard.\n5. Keep your CodeCov page open in a tab. Now go the your repo page in a new\ntab. Settings > Security > Secrets and variables > Actions\n6. On the next page, under Repository secrets, click\n\"New repository secret\", ensure `Name` is equal to `CODECOV_TOKEN`, paste\nyour clipboard credential into the `Secret` field then click \"Add secret\".\n7. Add a file to your repository, eg\n`.github/workflows/codecov-upload.yaml`.\n8. Save the following code snippet into the file:\n\n```{.abc filename=\".github/workflows/codecov-upload.yaml\"}\n\nname: MacOS Full Test Suite and Coverage\n\non:\n  push:\n  pull_request:\n    branches: [ \"dev\", \"main\" ]\n\njobs:\n  build:\n    name: Full & Coverage\n    runs-on: ubuntu-latest\n    timeout-minutes: 30\n    strategy:\n      fail-fast: false\n    steps:\n    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # sha for 4.2.2\n    - name: Set up Python 12\n      uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b  # sha for 5.3.0\n      with:\n        cache: 'pip'\n        python-version: 3.12\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n    - name: Generate Coverage Report\n      run: |\n        coverage run -m pytest\n        coverage report\n        coverage xml\n    - name: Upload coverage report to Codecov\n      uses: codecov/codecov-action@015f24e6818733317a2da2edd6290ab26238649a # v5.0.7\n      with:\n        file: ./coverage.xml\n        flags: unittests\n        verbose: true\n        token: ${{  secrets.CODECOV_TOKEN  }}\n        fail_ci_if_error: true\n\n```\n\n:::{.callout-note collapse=\"true\"}\n\n### Why reference SHA instead of versions? (Click to expand)\n\nIt's <a href=\"/./blogs/14-gh-actions-security.qmd\" target=_blank>more secure</a>.\nEnsure that you keep these versions updated to mitigate the risk of\nmalicious attacks.\n\n:::\n\n9. Commit and push the new workflow file to your remote. Go and watch the\nAction to ensure it prints your coverage report in the logs and uploads to\nthe CodeCov service without complaint.\n10. Go back to your tab with the CodeCov site. You may need to refresh or \nclick the \"Resync\" button, but your newly configured repo should now\ndisplay coverage results. Click on Configuration > Badges & Graphs to get\nthe links to your shiny new coverage shield.\n\n<p id=fin><i>fin!</i></p>\n\n",
    "supporting": [
      "21-codecov-setup_files"
    ],
    "filters": [],
    "includes": {}
  }
}