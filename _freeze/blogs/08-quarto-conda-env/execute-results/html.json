{
  "hash": "c6e568814a604907492adc6c8aef2226",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Conda Environments for Quarto Documents\"\nauthor: \"Rich Leyshon\"\ndate: January 06 2024\nupdated: July 02 2024\ndescription: \"How to specify a specific Conda environment when rendering quarto documents.\"\ncategories:         # delete categories as appropriate. using https://diataxis.fr/ documentation definitions.\n    - How-to\n    - Quarto\n    - Conda Environments\n    - Conda\nimage: https://images.pixexid.com/this-3d-abstract-composition-showcases-a-futuristic-cityscape-made-of-neon-light-3gph8k0n.jpeg?h=700&amp;q=70\nimage-alt: \"This 3D abstract composition showcases a futuristic cityscape made of neon lights and geometric shapes, perfect for a cyberpunk-inspired desktop wallpaper. Creative commons license, created by [Ralph](https://pixexid.com/profile/cjxrsxsl7000008s6h21jecoe)\"\ntoc: true\n---\n\n<figure class=center>\n  <img class=\"shaded_box\" width=400px src=\"https://images.pixexid.com/this-3d-abstract-composition-showcases-a-futuristic-cityscape-made-of-neon-light-3gph8k0n.jpeg?h=700&amp;q=70\"></img>\n  <figcaption style=\"text-align:center;\">Creative commons license, created by [Ralph](https://pixexid.com/profile/cjxrsxsl7000008s6h21jecoe)</figcaption>\n</figure>\n\n## Introduction\n\nThis article sets out minimal instructions on rendering quarto documents that\nrely on specified conda virtual environments. This article collates information\nfrom:\n\n- <a href=\"https://quarto.org/docs/projects/virtual-environments.html#using-conda\" target=\"_blank\">Quarto Documentation: Using Conda</a>\n- <a href=\"https://quarto.org/docs/computations/python.html#kernel-selection\" target=\"_blank\">Quarto Documentation: Using Python</a>\n- <a href=\"https://github.com/Anaconda-Platform/nb_conda_kernels#use-with-nbconvert-voila-papermill\" target=\"_blank\">nb_conda_kernels readme</a>\n\nIt is presumed that you will be working within a git repository at times. If\nthis is not the case, ignoring steps specifying git instructions should not\naffect your ability to successfully render the quarto documents.\n\n:::{.callout collapse=\"true\"}\n\n### A Note on the Purpose\n\nThe purpose of this article is not to explore reasons for using conda\nenviroments or to compare the pros and cons of the many different options for\nmanaging python virtual environments. It aims to help the reader configure\nquarto documents to run with a specified conda environment while remaining\nminimal, opting to link to sources of further information where discussion may\ncomplement the content.\n\n:::\n\n### Intended Audience\n\nPython practitioners familiar with conda environment management\n@CondaDocsEnvMgmt who are less familiar working with quarto documents\n@HelloQuarto.\n\n### The Scenario\n\nYou are writing a quarto document that contains python code. You would like to\nuse conda to manage your python dependencies. You are encountering problems in \nhaving quarto select the appropriate conda environment.\n\n:::{.callout-tip collapse=\"true\"}\n\n#### Named Environments\n\nThis article covers having quarto execute with \"prefix\" conda environments.\nThis setup may be useful specifically for a website where different site pages\nhave different dependencies.\n\nHowever, many readers may wish for a simpler solution. It is possible to have\nquarto websites and documents execute with a named environment instead. If you\nhave an environment created like below:\n\n`conda create -n my-awesome-env python -y`\n\nThen including the following statement within either the _quarto.yml or quarto\ndocument's YAML header should be enough to guarantee that the target\nenvironment is picked up when rendering:\n\n`jupyter: my-awesome-env`\n\nAdditionally, if you would just prefer the site or document to render with\nwhatever version of python is available in\n**the currently active environment**, then use:\n\n`jupyter: python3`\n\nMany thanks to Ethan for this tip.\n\n:::\n\n### What You'll Need:\n\n- [ ] Conda or miniconda\n- [ ] Quarto\n- [ ] Text editor eg VS Code\n- [ ] Python package manager (eg `pip`)\n- [ ] Access to a command line interface (CLI) such as terminal / Bash.\n- [ ] `requirements.txt`:\n\n```{.python filename=requirements.txt eval=false}\nnbclient\nnbformat\npalmerpenguins\n\n```\n- [ ] git (optional)\n\n## Configuring Quarto with Conda Env\n\n### Project Structure\n\n1. Create a new project folder. Open a terminal and change directory to the new\nproject.\n2. Save the requirements to a `requirements.txt` file.\n3. Create a new quarto document in the project root. In VS Code, use  \n`File` {{< fa arrow-right >}} `New File...` {{< fa arrow-right >}}\n`Quarto Document`.\n4. Write the following content to a python code chunk in the quarto file and\nsave as `penguins.qmd`\n```{.python filename=\"penguins.qmd\" eval=False}\ndf = penguins.load_penguins().dropna()\ndf.head()\n```\n### Configure the Environment\n\n5. Create a new conda environment with the `-p` flag and give it a suitably\ndescriptive name [^1]. Ensure that the environment is built with python 3.11\n[^2].\n```{.zsh filename=CLI eval=False}\nconda create -p SOME_ENV_NAME python=3.11 -y\n```\n6. Activate the environment.\n```{.zsh filename=CLI eval=False}\nconda activate ./SOME_ENV_NAME\n```\n7. Install the requirements file.\n```{.zsh filename=CLI eval=False}\npip install -r requirements.txt\n```\n8. Add a `.gitignore` file and include the name of the local environment\ndirectory created in step 4.\n```{.zsh filename=.gitignore eval=False}\nSOME_ENV_NAME/\n```\n\n### Configure the Quarto Project\n\n9. Create a `_quarto.yml` configuration file in the project root. In this file,\nwe will specify that the `quarto render` command should render any qmd files\nand ignore any files found within your local environment.\nAdd the\nfollowing content:\n```{.yaml filename=\"_quarto.yaml\" eval=False}\nproject:\n  type: website\n  output-dir: docs\n  render:\n    - \"*.qmd\"\n    - \"!/./SOME_ENV_NAME/\"\n\n```\n10. Use conda to install the `nb_conda_kernels` package. This is used to manage\npython jupyter kernels for notebooks.\n```{.zsh filename=CLI eval=False}\nconda install nb_conda_kernels\n```\n11. Copy the path returned from the below command\n```{.zsh filename=CLI eval=False}\njupyter --config-dir\n```\n12. Create a `jupyter_config.json` in the jupyter config directory:\n```{.zsh filename=CLI eval=False}\ntouch <INSERT_YOUR_CONFIG_DIR>/jupyter_config.json\n```\n13. Write the below content to this file and save.\n```{.zsh filename=CLI eval=False}\necho -e \"{\\n  \"CondaKernelSpecManager\": {\\n    \"kernelspec_path\": \"--user\"\\n  }\\n}\" >> <INSERT_YOUR_CONFIG_DIR>/jupyter_config.json\n```\n14. Run the below command to return a list of available kernels:\n```{.zsh filename=CLI eval=False}\npython -m nb_conda_kernels list\n```\n15. Copy the name (not the path) for the environment that you created with the\nformat `conda-env-<YOUR_ENV_NAME>-py`.\n16. Open `penguins.qmd`. Adjust the YAML header so that it contains the\nfollowing:\n```{.yaml filename=penguins.qmd eval=False}\njupyter: \n  kernelspec:\n    name: \"conda-env-<YOUR_ENV_NAME>-py\"\n    language: \"python\"\n    display_name: \"<YOUR_ENV_NAME>\"\n\n```\n17. You should now be able to render the quarto project, confirming that the\ntarget environment was activated in the CLI output. eg:\n```{.zsh filename=CLI eval=False}\nquarto render\n```\n\n```\nStarting <YOUR_ENV_NAME> kernel...Done\n```\n\n[^1]: When creating conda environments, the use of generic names such as `env`\nwill result in conda prepending the environment name with numbers to avoid\nconflicts. Use descriptive environment names in order to avoid\nthis, eg `penguins-env`.\n[^2]: `nb_conda_kernels` (a package required in\n[a later step](#configure-the-quarto-project)) does not currently work with\npython 3.12 or newer.\n\n### Tips\n\n* When encountering issues with quarto render, it can be informative to examine\nthe output of `quarto check` or `quarto check jupyter` in the CLI.\n* As there are many steps to configuring conda, it may be a good idea to create\na dedicated conda environment for all of your quarto projects. Quarto attempts\nto select an appropriate kernel based upon the content of the first executable\npython code chunk in your quarto document. Usually, this chunk would contain\nthe import statements. However, over time this would likely result in package\nconflicts over time.\n* The approach set out in this how-to would be a good fit for a website built\nwith quarto, where the configuration steps can be performed only once in a\nparent website environment, and then specific, minimal environments created for\neach article requiring a python environment.\n* Alternatively, consider using `venv` or `poetry` to manage python\nenvironments @DO4DSPKGLayer for quarto projects.\n\n## Troubleshooting\n\n* You've created a new environment and it is not discovered when running\n`python -m nb_conda_kernels list`:\n  * Activate your new environment\n  * `pip install ipykernel`\n  * Run:\n\n  ```{zsh}\n  python -m ipykernel install --user --name <INSERT_ENV_NAME> --display-name \"<INSERT_DISPLAY_NAME>\"\n  ```\n\n  * Deactivate the new environment.\n  * Run `python -m nb_conda_kernels list` once more and the new env should\n  appear.\n  * Taken from [this SO thread](https://stackoverflow.com/questions/71993110/anaconda-3-2021-11-environment-not-showing-up-in-jupyter-notebook) \n\n## Conclusion\n\nThis article has walked the reader through setting up a basic quarto project,\ncreating a conda environment, and configuring a quarto document to render with\na specified environment. For more help with quarto, consult the quarto-cli\nGitHub repository @QuartoCLI and the RStudio Community @PositCommunity (soon to\nrebrand to the Posit Community).\n\n<p id=fin><i>fin!</i></p>\n\n",
    "supporting": [
      "08-quarto-conda-env_files"
    ],
    "filters": [],
    "includes": {}
  }
}