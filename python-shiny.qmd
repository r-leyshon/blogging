---
title: "Python for Shiny"
author: "Rich Leyshon."
toc: true
---
## Python for Shiny is now a thing...

<figure class=center>
  <img src=www/01-python-shiny/shiny-python.png alt="AI-generated drawing of a shiny python.">
  <figcaption>[DALL.E prompt](https://huggingface.co/spaces/dalle-mini/dalle-mini): python logo golden Sparkling glittery bokeh bright.</figcaption>
</figure>

[Python Shiny](https://pypi.org/project/shiny/) celebrates its first year
anniversary on PyPi in July 2023. In case that needs further qualification, this
is the Python-native implementation of the beloved RShiny dashboarding package
that has been available in the R programming framework for over a decade now. 
Python Shiny has benefited from the experience that the developers at
[Posit](https://posit.co/) have gained in building its more mature,
R-flavoured sibling.

  

Python Shiny has experienced what I would describe as an accelerated evolution
and has the potential to become a frontrunner in Pythonic, production-grade
applications. Mainly because it adheres to an evaluation strategy which is a bit
un-pythonic. Shiny introduces dashboarding with lazy evaluation, meaning that
elements of your code will only be evaluated when there is a need to do so. This
is not always a great idea, particularly for procedural or object-oriented
programming. But it does make event-drive applications more efficient and
scalable. More on [Posit's take on the USP of Python Shiny here](https://posit.co/blog/why-shiny-for-python/).


<br>

***
## An Example Python Shiny App

This application is written in Python and served with a free [shinyapps.io](https://www.shinyapps.io/)
account. I made the app to explore the quality of the spatial data available
within [Open Street Map](https://www.openstreetmap.org/) (OSM) data for certain
urban areas. Open Street Map is an open-source, community-maintained source of
transport network data. The files also contain other spatial features, such as
landuse polygons. The quality of this data varies by location, as you may find
in the app. 

The application is pretty straight forward. It uses pandas to read in some
pre-prepared data tables from a data folder. These files were prepared with
a python package called [pyrosm](https://pyrosm.readthedocs.io/en/latest/).
Pyrosm is a useful application for ingesting, assessing & visualising OSM data.
Selecting a city from the dropdowns then clicking the "Go" button will read the
correct table from this little database, then using matplotlib, it visualises
the selected spatial features. The app also presents some simple summary
statistics in tables at the bottom of the page. 

The preparation of the data files is not strictly necessary. You can serve an 
app and have it make external connections to data services to ingest data. In
this instance, I chose to pre-process the data as it helped to improve the
performance of the app. Even so, selecting London or Leeds can result in some
wait times, so please be aware of this. Options for improving the performance 
further could include parallel processing, though that is not implemented here
and is beyond the scope of this little example.

<div class=centerdiv>
  <iframe src="https://richleysh84.shinyapps.io/pyrosm-cities-app/" title="Python Shiny Open Street Map Application" style="border:0.3em solid lightgray" align=center></iframe>
<div>


***


## Getting Started with Python Shiny




Getting started

### Frontend

### Backend

***

## A Year's Progress


### Reactivity


### Modular Dashboard

***

## The Shiny Ecosystem

A nostalgic look at RShiny ecosystem.

### Python Shiny Add-ins

### Python Shiny Wishlist

### Shinyhelper

#### Shinytest

#### DT tables

#### Golem

#### Reactlog

***

## In Review

Final thoughts & sign off
