<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>The Data Savvy Corner</title>
<link>https://thedatasavvycorner.netlify.app/index.html</link>
<atom:link href="https://thedatasavvycorner.netlify.app/index.xml" rel="self" type="application/rss+xml"/>
<description>Musings, ramblings, generally putting things down in text so I don&#39;t forget them.</description>
<generator>quarto-1.3.340</generator>
<lastBuildDate>Sun, 10 Sep 2023 13:12:15 GMT</lastBuildDate>
<item>
  <title>How to Automate Quarto Builds with GitHub Actions</title>
  <dc:creator>Rich Leyshon</dc:creator>
  <link>https://thedatasavvycorner.netlify.app/blogs/03-quarto-github-actions.html</link>
  <description><![CDATA[ 



<section id="assumptions" class="level2">
<h2 class="anchored" data-anchor-id="assumptions">Assumptions</h2>
<ul>
<li>You’re set up with a <a href="https://github.com/">GitHub account</a>.</li>
<li>You’re able to run git commands <span class="citation" data-cites="GitHubGit">[1]</span> from a command line interface (CLI).</li>
<li>You’ve installed quarto. <span class="citation" data-cites="HelloQuarto">[2]</span></li>
<li>You’ve a preferred text editor installed, eg Visual Studio Code, Atom or similar.</li>
</ul>
<p>This guide is based on the useful quarto continuous integration (CI) documentation <span class="citation" data-cites="quartoCIdocs">[3]</span> and the examples provided within the Quarto CI GitHub repository <span class="citation" data-cites="QuartoDevCI">[4]</span>.</p>
</section>
<section id="ci-for-quarto" class="level2">
<h2 class="anchored" data-anchor-id="ci-for-quarto">CI for Quarto</h2>
<p>The repository used for setting up this example is <a href="https://github.com/r-leyshon/quarto-ci-example">available on GitHub</a>.</p>
<p>The renderred site should look like this on <a href="https://r-leyshon.github.io/quarto-ci-example/">GitHub Pages</a>.</p>
<section id="in-the-github-user-interface" class="level3">
<h3 class="anchored" data-anchor-id="in-the-github-user-interface">In the GitHub User Interface</h3>
<ol type="1">
<li>Create a repository.</li>
<li>Copy the clone url.</li>
</ol>
</section>
<section id="in-the-cli" class="level3">
<h3 class="anchored" data-anchor-id="in-the-cli">In the CLI</h3>
<ol start="3" type="1">
<li><code>cd</code> to wherever you would like to keep your local clone.</li>
<li><code>git clone &lt;INSERT REPO URL&gt;</code></li>
<li><code>cd &lt;INSERT REPO PATH&gt;</code></li>
<li><code>touch .github/workflows/publish-quarto.yml</code></li>
<li><code>touch index.qmd</code></li>
<li><code>touch .nojekyll</code></li>
<li><code>touch _quarto.yml</code></li>
</ol>
</section>
<section id="in-the-text-editor" class="level3">
<h3 class="anchored" data-anchor-id="in-the-text-editor">In the text editor</h3>
<ol start="10" type="1">
<li>Copy and paste the below into the document (you may need to enable viewing hidden files on your system - command + shift + . On macOS):</li>
</ol>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Render and Publish</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">push</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">branches</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> main</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  # changes pushed to this branch will trigger a build.</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">jobs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">build-deploy</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runs-on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ubuntu-latest</span></span>
<span id="cb1-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">permissions</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">contents</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> write</span></span>
<span id="cb1-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">steps</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Check out repository</span></span>
<span id="cb1-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> actions/checkout@v3</span></span>
<span id="cb1-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span></span>
<span id="cb1-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Set up Quarto</span></span>
<span id="cb1-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> quarto-dev/quarto-actions/setup@v2</span></span>
<span id="cb1-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">version</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.3.340</span></span>
<span id="cb1-20"></span>
<span id="cb1-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Publish to GitHub Pages (and render)</span></span>
<span id="cb1-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> quarto-dev/quarto-actions/publish@v2</span></span>
<span id="cb1-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">target</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> gh-pages</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # renderred html files will be pushed here</span></span>
<span id="cb1-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-26"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GITHUB_TOKEN</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ secrets.GITHUB_TOKEN }}</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # this secret is always available for github actions</span></span></code></pre></div>
<ol start="11" type="1">
<li>Copy paste the below into the index.qmd, using your preferred text editor:</li>
</ol>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb2-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">title</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Hello Quarto CI</span></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">date</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> last-modified</span></span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">resources</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> .nojekyll</span></span>
<span id="cb2-6"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb2-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Setting up CI for quarto website build &amp; publish.</span></span></code></pre></div>
<ol start="12" type="1">
<li>Copy paste the following into _quarto.yml</li>
</ol>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">project</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">type</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> website</span></span>
<span id="cb3-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">output-dir</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> docs</span></span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">execute</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">freeze</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> auto</span></span>
<span id="cb3-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> html</span></span></code></pre></div>
</section>
<section id="back-in-the-cli" class="level3">
<h3 class="anchored" data-anchor-id="back-in-the-cli">Back in the CLI</h3>
<ol start="13" type="1">
<li>At the project root: <code>quarto render</code>. This will make a docs folder with your rendered website, a directory called index_files with more site dependencies and a .gitignore file. The only file needed to be committed is the .gitignore.</li>
<li><code>echo /docs/ &gt;&gt; .gitignore</code></li>
<li><code>echo /index_files/ &gt;&gt; .gitignore</code></li>
<li><code>git status</code> should look like this:</li>
</ol>
<pre><code>On branch main
Your branch is up to date with 'origin/main'.

Untracked files:
  (use "git add &lt;file&gt;..." to include in what will be committed)
        .github/workflows/publish-quarto.yml
        .gitignore
        _quarto.yml
        index.qmd</code></pre>
<ol start="17" type="1">
<li><code>git add .</code></li>
<li><code>git commit -m "Configure quarto"</code></li>
<li><code>git push</code></li>
</ol>
</section>
<section id="back-to-the-web-browser" class="level3">
<h3 class="anchored" data-anchor-id="back-to-the-web-browser">Back to the Web Browser</h3>
<ol start="20" type="1">
<li>If the push was successful, navigate to your repository</li>
<li>Click on the drop down arrow next to main branch</li>
<li>Click on ‘view all branches’</li>
<li>Click the ‘new branch’ button</li>
<li>Create the branch <code>gh-pages</code></li>
<li>Click on ‘settings’ in the top ribbon of the repo site</li>
<li>Click on ‘Pages’ in the menu to the left</li>
<li>Check that your GitHub Pages is setup is Build and deployment &gt; Source &gt; Deploy from a branch</li>
<li>Check that the Branch setup is gh-pages /root</li>
<li>After the CI has finished building, you can click on the url that appears at the top of this page under “GitHub Pages” to check that the site has been deployed properly</li>
</ol>
</section>
</section>
<section id="creating-a-workflow-build-status-badge" class="level2">
<h2 class="anchored" data-anchor-id="creating-a-workflow-build-status-badge">Creating a Workflow Build Status Badge</h2>
<p>Use the following format to create a workflow build status badge in your readme: <code>https://github.com/OWNER/REPOSITORY/actions/workflows/WORKFLOW-FILE/badge.svg</code><br>
For example: <code>https://github.com/r-leyshon/quarto-ci-example/actions/workflows/publish-quarto.yml/badge.svg</code><br>
Finally, embed the url in the src of a markdown image, like: <code>![example workflow](https://github.com/r-leyshon/quarto-ci-example/actions/workflows/publish-quarto.yml/badge.svg)</code></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://thedatasavvycorner.netlify.app/blogs/https:/github.com/r-leyshon/quarto-ci-example/actions/workflows/publish-quarto.yml/badge.svg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">example workflow</figcaption>
</figure>
</div>
<p id="fin">
<i>fin!</i>
</p>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body">
<div id="ref-GitHubGit" class="csl-entry">
<div class="csl-left-margin">[1] </div><div class="csl-right-inline">GitHub, <span>“<span class="nocase">Getting Started with Git</span>.”</span> <a href="https://docs.github.com/en/get-started/getting-started-with-git">https://docs.github.com/en/get-started/getting-started-with-git</a></div>
</div>
<div id="ref-HelloQuarto" class="csl-entry">
<div class="csl-left-margin">[2] </div><div class="csl-right-inline">Quarto, <span>“<span>Hello Quarto</span>.”</span> <a href="https://quarto.org/docs/get-started/hello/rstudio.html">https://quarto.org/docs/get-started/hello/rstudio.html</a></div>
</div>
<div id="ref-quartoCIdocs" class="csl-entry">
<div class="csl-left-margin">[3] </div><div class="csl-right-inline">Quarto, <span>“<span class="nocase">Publishing with Continuous Integration</span>.”</span> <a href="https://quarto.org/docs/publishing/ci.html">https://quarto.org/docs/publishing/ci.html</a></div>
</div>
<div id="ref-QuartoDevCI" class="csl-entry">
<div class="csl-left-margin">[4] </div><div class="csl-right-inline">Quarto, <span>“<span>Quarto Developers CI Repository</span>.”</span> <a href="https://github.com/quarto-dev/quarto-actions">https://github.com/quarto-dev/quarto-actions</a></div>
</div>
</div></section></div> ]]></description>
  <category>How-to</category>
  <category>CI/CD</category>
  <category>Front End Dev</category>
  <guid>https://thedatasavvycorner.netlify.app/blogs/03-quarto-github-actions.html</guid>
  <pubDate>Sun, 10 Sep 2023 13:12:15 GMT</pubDate>
  <media:content url="https://i1.pickpik.com/photos/452/586/379/code-html-digital-coding-preview.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Ghostrunner</title>
  <dc:creator>Rich Leyshon</dc:creator>
  <link>https://thedatasavvycorner.netlify.app/music-reviews/01-ghostrunner-ost.html</link>
  <description><![CDATA[ 



<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>I’m thrilled to kick off the music review section of my blog with an engaging work by one of my favourite synth artists.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>This is a record with high turnover &amp; great energy - one to put on loop when you need to pull out all the stops on a thorny problem.</p>
</div>
</div>
<p>Ghostrunner was one of the acclaimed independent platformer games of 2020. It’s aged particularly well on the latest generation of consoles, thanks in no small part to its fantastic soundtrack. The developers made a safe bet in selecting Daniel Deluxe to compose the nihilistic, cyberpunk soundtrack. Deluxe has been producing knockout darksynth since 2014 and has been a regular feature of my working music since I started programming.</p>
<p>Deluxe’s 2014 effort by the name of <a href="https://open.spotify.com/album/1G66EjFlNMcXL4sudDiYEF">Darkness</a> was one of the first synthwave songs I had come across and partly the reason why I have gone so deep with this genre. It’s a fantastic piece of 80s romantic nostalgia with evocative speech samples taken from the 1985 fantasy movie Legend, starring Tim Curry as the eponymous Darkness - a character that haunted the nightmares of many ’80s children. Much of Deluxe’s catalogue is worthy of your time and Ghostrunner OST is the crowning achievement. As his fifth and latest (at time of writing) studio album, Ghostrunner draws and builds upon the stylistic themes explored in previous albums. Though in this effort, a shorter average track length has kept things laser-focussed. Ghostrunner is a great introduction to synthwave of the catalogue of Daniel Deluxe as a whole, but luckily for the newcomer - there’s plenty of depth to mine from this musical vein.</p>
</section>
<section id="music-for-cyborg-ninjas" class="level2">
<h2 class="anchored" data-anchor-id="music-for-cyborg-ninjas">Music for Cyborg Ninjas</h2>
<p>It’s worth noting that this music isn’t for everyone. But I’ve never favoured that sort of music myself and wouldn’t find the time to review it. This music was written to energise players ready to engage in parkour-slash-em-up fun, without distracting from the brief interludes of narrative. As with all my favoured music for work, you won’t find any ballads or warbling vocals here, so if you want something to hum along to, you’d best find another blog!</p>
<p>But if you’re down for this, I’d recommend clicking play on the spotify player button and enjoying the tunes while you read.</p>
<iframe style="border-radius:12px" src="https://open.spotify.com/embed/album/6mS0ssCxtLvB0IcVP7sR66?utm_source=generator" width="40%" height="80" frameborder="0" allowfullscreen="" allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" class="center">
</iframe>
<p><br> Let’s take a look at the audio feature analysis for this album. For a formal description of the audio feature categories presented here, please consult the <a href="https://developer.spotify.com/documentation/web-api/reference/get-audio-features" target="_blank">Spotify Developer API Documentation</a>.</p>
<div class="cell" data-layout-align="center" width="300px">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://thedatasavvycorner.netlify.app/music-reviews/01-ghostrunner-ost_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Interpreting the Ridge Plot (Click to expand)
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>These ridge plots show a histogram of the mean audio feature values across each track in the album. Look across the horizontal axis at where the peaks for each feature occur. For example, if the album contains lots of tracks with busy vocals, the speechiness feature will show a peak to the right of the horizontal axis. Conversely, an instrumental album would have a speechiness peak to the left of the horizontal axis but you would also expect it to have a peak to the right of the axis in the instrumentalness feature.</p>
</div>
</div>
</div>
<p>Ghostrunner OST is clearly an instrumental album. This plot shows that the tracks all score lowly on speechiness and highly on instrumentalness, with tight distributions. The album generally displays high measures for energy and danceability, though with broader distributions than that displayed by speechiness &amp; instrumentalness. The majority of the album is clear, steady and fast rhythm. Interestingly, the acousticness feature presents a very broad range of distribution in the confidence that tracks do not have electrical amplification. This really does not seem correct to me, as the album is unapologetically synth all the way. This is potentially affected by production effects favouring reverb and echo, but that is surmising on my part. Lastly, I’ll turn to valence, which is a measure of positivity within the music. This feature is right-skewed. A higher number of lower valence values makes sense, as much of the album carries a sinister, Orwellian, digital-dystopian tone - generally interpretable as negative I would agree. The presence of higher values in this feature suggests that a fewer number of the tracks may be characterised with positive emotion.</p>
</section>
<section id="the-tracks" class="level2">
<h2 class="anchored" data-anchor-id="the-tracks">The Tracks</h2>
<p>Below are the mean audio feature values for each track. The last row (green) presents a mean summary of the album.</p>
<div class="cell">
<div class="cell-output-display">
<table data-quarto-postprocess="true" class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th">track_name</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">danceability</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">energy</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">speechiness</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">acousticness</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">instrumentalness</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">valence</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Air</td>
<td style="text-align: right;">0.5730</td>
<td style="text-align: right;">0.7320</td>
<td style="text-align: right;">0.02960</td>
<td style="text-align: right;">0.2660000</td>
<td style="text-align: right;">0.8930</td>
<td style="text-align: right;">0.05400</td>
</tr>
<tr class="even">
<td style="text-align: left;">Infiltrator</td>
<td style="text-align: right;">0.6070</td>
<td style="text-align: right;">0.5600</td>
<td style="text-align: right;">0.04340</td>
<td style="text-align: right;">0.0239000</td>
<td style="text-align: right;">0.8120</td>
<td style="text-align: right;">0.03720</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Blood and Steel</td>
<td style="text-align: right;">0.6960</td>
<td style="text-align: right;">0.3260</td>
<td style="text-align: right;">0.05130</td>
<td style="text-align: right;">0.0061700</td>
<td style="text-align: right;">0.8210</td>
<td style="text-align: right;">0.03760</td>
</tr>
<tr class="even">
<td style="text-align: left;">Dharma</td>
<td style="text-align: right;">0.6160</td>
<td style="text-align: right;">0.8290</td>
<td style="text-align: right;">0.03830</td>
<td style="text-align: right;">0.1510000</td>
<td style="text-align: right;">0.8860</td>
<td style="text-align: right;">0.17100</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Capture</td>
<td style="text-align: right;">0.7070</td>
<td style="text-align: right;">0.6310</td>
<td style="text-align: right;">0.04420</td>
<td style="text-align: right;">0.0439000</td>
<td style="text-align: right;">0.8350</td>
<td style="text-align: right;">0.40100</td>
</tr>
<tr class="even">
<td style="text-align: left;">Forget the Past</td>
<td style="text-align: right;">0.4490</td>
<td style="text-align: right;">0.5400</td>
<td style="text-align: right;">0.03330</td>
<td style="text-align: right;">0.2940000</td>
<td style="text-align: right;">0.9050</td>
<td style="text-align: right;">0.03320</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Access Denied</td>
<td style="text-align: right;">0.5680</td>
<td style="text-align: right;">0.5320</td>
<td style="text-align: right;">0.03660</td>
<td style="text-align: right;">0.4890000</td>
<td style="text-align: right;">0.8820</td>
<td style="text-align: right;">0.04460</td>
</tr>
<tr class="even">
<td style="text-align: left;">Let Them Know</td>
<td style="text-align: right;">0.8380</td>
<td style="text-align: right;">0.6600</td>
<td style="text-align: right;">0.05060</td>
<td style="text-align: right;">0.7990000</td>
<td style="text-align: right;">0.7790</td>
<td style="text-align: right;">0.74100</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Sector</td>
<td style="text-align: right;">0.5450</td>
<td style="text-align: right;">0.8440</td>
<td style="text-align: right;">0.03040</td>
<td style="text-align: right;">0.0035500</td>
<td style="text-align: right;">0.7040</td>
<td style="text-align: right;">0.03770</td>
</tr>
<tr class="even">
<td style="text-align: left;">Factory</td>
<td style="text-align: right;">0.4630</td>
<td style="text-align: right;">0.9280</td>
<td style="text-align: right;">0.03680</td>
<td style="text-align: right;">0.3610000</td>
<td style="text-align: right;">0.8990</td>
<td style="text-align: right;">0.29100</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Striker</td>
<td style="text-align: right;">0.5340</td>
<td style="text-align: right;">0.8180</td>
<td style="text-align: right;">0.03440</td>
<td style="text-align: right;">0.0102000</td>
<td style="text-align: right;">0.8380</td>
<td style="text-align: right;">0.22600</td>
</tr>
<tr class="even">
<td style="text-align: left;">Celerity</td>
<td style="text-align: right;">0.6430</td>
<td style="text-align: right;">0.8840</td>
<td style="text-align: right;">0.03360</td>
<td style="text-align: right;">0.0109000</td>
<td style="text-align: right;">0.8540</td>
<td style="text-align: right;">0.03650</td>
</tr>
<tr class="odd">
<td style="text-align: left;">The Orb</td>
<td style="text-align: right;">0.5120</td>
<td style="text-align: right;">0.9470</td>
<td style="text-align: right;">0.05290</td>
<td style="text-align: right;">0.3180000</td>
<td style="text-align: right;">0.8410</td>
<td style="text-align: right;">0.74600</td>
</tr>
<tr class="even">
<td style="text-align: left;">Truth to Power</td>
<td style="text-align: right;">0.6530</td>
<td style="text-align: right;">0.8970</td>
<td style="text-align: right;">0.05590</td>
<td style="text-align: right;">0.3430000</td>
<td style="text-align: right;">0.8700</td>
<td style="text-align: right;">0.61300</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Blaster</td>
<td style="text-align: right;">0.5720</td>
<td style="text-align: right;">0.8750</td>
<td style="text-align: right;">0.03870</td>
<td style="text-align: right;">0.2190000</td>
<td style="text-align: right;">0.8380</td>
<td style="text-align: right;">0.09020</td>
</tr>
<tr class="even">
<td style="text-align: left;">Razor</td>
<td style="text-align: right;">0.3250</td>
<td style="text-align: right;">0.9190</td>
<td style="text-align: right;">0.05040</td>
<td style="text-align: right;">0.0002510</td>
<td style="text-align: right;">0.6570</td>
<td style="text-align: right;">0.05070</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Vendetta</td>
<td style="text-align: right;">0.6400</td>
<td style="text-align: right;">0.8900</td>
<td style="text-align: right;">0.05720</td>
<td style="text-align: right;">0.0502000</td>
<td style="text-align: right;">0.8240</td>
<td style="text-align: right;">0.14500</td>
</tr>
<tr class="even">
<td style="text-align: left;">Air (Cybervoid)</td>
<td style="text-align: right;">0.5180</td>
<td style="text-align: right;">0.7210</td>
<td style="text-align: right;">0.02730</td>
<td style="text-align: right;">0.3240000</td>
<td style="text-align: right;">0.9510</td>
<td style="text-align: right;">0.16400</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Solitude</td>
<td style="text-align: right;">0.4830</td>
<td style="text-align: right;">0.9510</td>
<td style="text-align: right;">0.04010</td>
<td style="text-align: right;">0.0090000</td>
<td style="text-align: right;">0.8210</td>
<td style="text-align: right;">0.39000</td>
</tr>
<tr class="even">
<td style="text-align: left;">Sundown</td>
<td style="text-align: right;">0.2860</td>
<td style="text-align: right;">0.3880</td>
<td style="text-align: right;">0.06380</td>
<td style="text-align: right;">0.2700000</td>
<td style="text-align: right;">0.6560</td>
<td style="text-align: right;">0.06490</td>
</tr>
<tr class="odd">
<td style="text-align: left; color: white !important; background-color: #146542 !important;">Album Mean</td>
<td style="text-align: right; color: white !important; background-color: #146542 !important;">0.5614</td>
<td style="text-align: right; color: white !important; background-color: #146542 !important;">0.7436</td>
<td style="text-align: right; color: white !important; background-color: #146542 !important;">0.04244</td>
<td style="text-align: right; color: white !important; background-color: #146542 !important;">0.1996036</td>
<td style="text-align: right; color: white !important; background-color: #146542 !important;">0.8283</td>
<td style="text-align: right; color: white !important; background-color: #146542 !important;">0.21873</td>
</tr>
</tbody>
</table>


</div>
</div>
<p><strong>Air</strong> Beautiful synth bleep arrangement overlayed with menacing robot groans. A mashy bass beat rounds out this atmospheric ode to a mysterious, futuristic cityscape.</p>
<p><strong>Infiltrator</strong> Bassy experiments with tempo against a stripped-back rhythm section. Reminds me of scrap brain zone on sonic the hedgehog. Intermittent alert signals and robotic glitches. Glimpses of some wonderful serene motif before being thrust back into the main formation. At the time of writing, this track is currently the most popular on this album.</p>
<p><strong>Blood and steel</strong> This track is very recognizable. Inspires an unsettling feeling of Deja vú within the listener. Conjuring images of a futuristic crime scene investigation. A dreamy intro before a strong drum &amp; bass injection. The track culminates in a growing phaser storm that smothers the rest of the track before it cuts at the point of its culmination. A highlight of the album.</p>
<p><strong>Dharma</strong> Anyone of a certain age will likely remember ABC’s gripping sci fi thriller Lost, of the early noughties. Dharma was the name of the malevolent. corporation behind much of the protagonists woes. This track strikes a fittingly menacing tone. A dripping, ticking lick loops over a bossy bass hook. Lazer phasers growing in tone &amp; pitch throughout for good measure.</p>
<p><strong>Capture</strong> A zoned out, decidedly creepy intro with an android snigger looped over bell tolls, metallic pipes clanging and a menagerie of industrial noise. A slower beat chugging away only to take frequent breaks to peak at you from the shadows. Sinister but with style.</p>
<p><strong>Forget the past</strong> Begins on a melancholy reflection that seems to consider the song’s title some advice to self. Continues the chilling set by the previous track with an inhumane battery of bass noise, giving way to serene, elongated spacetrips of harmonic synth.</p>
<p><strong>Access denied</strong> A collective of error signals experienced through a thick gelatinous membrane. This song feels like being rudely awoken from the matrix. An electric wire to the brain in the high tempo intro of a squelchy phaser bleep on loop. Drum &amp; cymbal snares introduce some peril to the experience. Another favourite of mine.</p>
<p><strong>Let them know</strong> High pitch melodic trills over a stripped back drum beat with a growing, bubbling, frothy arsenal of phaser barrages. The trills give way to a strong bass line, dipping in and out of the foreground. Halfway in, a Wipeout-style high speed fade is accompanied by checkpoint ticks that sound a bit like hitting metal on metal. This track has a great time trial feel. The layers wipe together in a busy, well-structured crescendo. This is the highlight of the album for me.</p>
<p><strong>Sector</strong> Starting on a mysterious, hyper-speed contrail of sound. With some productionised robot intonation rapping over the crunchy bass drum. Joined later by a Japanese-inspired treble section for the interested Japanophile. Reminiscent of the excellent <a href="https://open.spotify.com/album/3K48lplYXbQSc87pfuJ0Pa">Triads by Code Elektro</a> (review sure to come at some point).</p>
<p><strong>Factory</strong> A clever mix of major and minor android aria signals. Locking in some bassy robo groans with some mysterious echo-flared laser trills. The track descends into a mission impossible repeato while adding some beautiful high frequency synth melody.</p>
<p><strong>Striker</strong> Enters with an industrial explosion experienced from a vast distance, rippling out into a wide pool of synth integration tests, like circuit fingers working through a mossy undertow. High frequency synth chimes with a glitched notation slips away to a seedy, menacing robotic bridge. The pretty synth returns to work over the menacing robo. A close second favourite.</p>
<p><strong>Celerity</strong> - Celerity is not a word I have encountered before, but according to <a href="https://www.dictionary.com/browse/celerity">dictionary.com</a> it means swift movement. An interesting choice of title for this track as I interpret the rhythm to be more steady. Starting on a <a href="https://open.spotify.com/track/3xH7xicTlukrmnHIHINTW0">Prodigy-like industrial D&amp;B</a> replete with an accompanying fairground loop. A glitched-up affair with a jarring, chugging interference playing with your expectations throughout. This moves on to some graceful tech wipes for a moment before the interference dominates once more. Ending on a commandeering double-time march to up the ante, this track conjures a long-distance robotic pursuit.</p>
<p><strong>The orb</strong> At this point in the album, we encounter a run of shorter, more intense songs. The orb has a brilliant, shimmering, robot talk phasing in and out of consciousness. Moving on to experiment with beat and tone patterns, swaying in and out of the fore as the beat establishes command. Short, but oh, so sweet.</p>
<p><strong>Truth to power</strong> A chunky drum section overlayed by a whispered android complaint growing to take full form, before relegated to radio playback. The android voice jumps in and out of focus while comets wipe by and leaves a trail of icy debris zooming past the listener. Likely to be the sort of music that Chat-GPT generates when frustrated by the lack of imagination presented by its users.</p>
<p><strong>Blaster</strong> Watch out for this one - there’s something larger rising out of the depths, waving away in front of your ears. Once surfaced, it reveals itself to be largely drum-engined automation with a bassy tempest of brass billowing away under the surface, like an automaton that’s managed to preserve the very last of the human tuba instrumentalists, lifespan extended with cybernetic implants.</p>
<p><strong>Razor</strong> Accusatory synth calls out against a halloween-esque synth sustain. Emerging out onto an ’80s horror set before adopting an attention-demanding rhythm. High-end synth parrots away while some os-level tech blurb ramps up to the fore.</p>
<p><strong>Vendetta</strong> A reliable, robotic trill dances between pitches, laying off for some harmonious electro organ to swing in and out overhead. Machine gun volleys shower their weight to the beat.</p>
<p><strong>Air (Cybervoid)</strong> A welcome reprise to the first track of the album revisits a suspicious first day in a cybernetic future. A subtle difference to the original but more immediate. Blazing and warm bass tones intervene the laser hook and encompasses around the track as it progresses.</p>
<p><strong>Solitude</strong> A dreamy space-age synthetic Bach rises from the murky depths to sit in a shimmering orchestral pool, composing his techno-symphonies. In stark contrast, squishy, rubbery deep bass android vocals sound out over the alien morass.</p>
<p><strong>Sundown</strong> A gothic android monk prayer cedes to laser piano overlays. Cutting out to flatlined electro strings &amp; the futuristic remnants of whatever birds evolved into once AI conquered the Earth. A contemplative end to a high-energy album. Likely to reflect a sombre tone to the end of the video game, though I cannot confirm this as I was pretty rubbish when I tried it.</p>
</section>
<section id="highs-and-lows" class="level2">
<h2 class="anchored" data-anchor-id="highs-and-lows">Highs and Lows</h2>
<p>No real lows to talk of in this album, but the three standout tracks that I recommend are:</p>
<ol type="1">
<li>Let them know</li>
<li>Striker</li>
<li>Blood and steel</li>
</ol>
</section>
<section id="overall" class="level2">
<h2 class="anchored" data-anchor-id="overall">Overall</h2>
<p>A smashing piece of dark synthpop that delivers focussed energy while conserving your concentration. The theme is sinister at points but never loses its potency for concentrainment. A good choice for smashing out some shallow work or a briefing note in a short space of time. Perhaps not as inspiring or uplifting as some of my other instrumental ambient choices for creative energy. But this album establishes a steady cadence and will keep your foot tapping while your hands do the typing.</p>


</section>

 ]]></description>
  <category>Electronic</category>
  <category>Synthwave</category>
  <category>Video Game Music</category>
  <guid>https://thedatasavvycorner.netlify.app/music-reviews/01-ghostrunner-ost.html</guid>
  <pubDate>Sun, 10 Sep 2023 06:29:29 GMT</pubDate>
  <media:content url="https://i.scdn.co/image/ab67616d0000b2736bbb199a6537fe7d858ec523" medium="image"/>
</item>
<item>
  <title>Deep Work</title>
  <dc:creator>Rich Leyshon</dc:creator>
  <link>https://thedatasavvycorner.netlify.app/book-reviews/01-deep-work.html</link>
  <description><![CDATA[ 



<figure class="center figure">
<img class="shaded_box figure-img" src="https://thedatasavvycorner.netlify.app/book-reviews/https:/upload.wikimedia.org/wikipedia/commons/thumb/0/0f/Fanal%2C_Seixal%2C_Madeira_-_2021-09-19_-_IMG_7200.jpg/800px-Fanal%2C_Seixal%2C_Madeira_-_2021-09-19_-_IMG_7200.jpg?20220630234019" alt="Misty trees in Fanal Forest, Madeira." width="400px">
<figcaption class="figure-caption">
Fanal Forest, Madeira. Wikimedia Creative Commons.
</figcaption>
</figure>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>At the date of writing this review, Deep Work scores an average of 4.19 / 5.00 across over 141k ratings on <a href="https://www.goodreads.com/en/book/show/25744928">goodreads</a>. Also nominated by the same website for Best Nonfiction, 2016. Awarded gongs for best book and best seller in business &amp; leadership by Amazon &amp; the Wall Street Journal.</p>
<p>This book was recommended to me by a close colleague and I read it on holidays during some much-needed downtime in the Summer of 2023. I should note that I reflect on the relevance of the advice in this book to my own personal circumstances. To that end, it is worth noting that I currently work as a senior data scientist and that I happen to face many competing priorities in my day-to-day job.</p>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>Cal Newport is a celebrated author within the field of personal productivity. According to his website, Newport is an MIT Grad in Computer Science and a professor at Georgetown University <span class="citation" data-cites="CalNewport">[1]</span>. Deep Work is structured in 2 parts.</p>
<section id="part-1-the-idea" class="level3">
<h3 class="anchored" data-anchor-id="part-1-the-idea">Part 1: The Idea</h3>
<p>Here the author sets out his stall, establishing definitions of fundamental concepts, such as deep and shallow work and their relative value to the author’s definition of what he refers to as the ‘knowledge worker’. The author sets out noteworthy examples of individuals who (have) had a proven ability to establish deep thought throughout their illustrious careers. The author then sets out the case for why deep work is a rewarding endeavor and how its antithesis of a connected and responsive workday offers little benefit to the individual, the organisation or society. Yet , many modern organisations have unwittingly promoted and even entrenched a shallow work culture among their employees.</p>
</section>
<section id="part-2-the-rules" class="level3">
<h3 class="anchored" data-anchor-id="part-2-the-rules">Part 2: The Rules</h3>
<p>In this section, the author offers suggested interventions to make within your workplace. Exemplifying strategies with personal experience and from those around him, Newport assists the reader in visualising a professional future where they can rule their schedule, rather than the reverse.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>“… remain unresponsive to the pinprick onslaught of small obligations that seem harmless in isolation but aggregate to serious injury to his deep work habit.” <span class="citation" data-cites="DeepWork">[2, p. 142]</span></p>
</div>
</div>
<p>The author identifies potential sticking points and attempts to treat them, offering suggested strategies for securing the support of colleagues, stakeholders and managers in the reader’s pursuit of deep work. Moderating his message, Newport offers words of advice against the pursuit of deep work to the exclusion of everything else, yet establishing set constraints within a schedule where shallow tasks and administrative commitments are not permitted to undo your daily objectives.</p>
</section>
</section>
<section id="analysis-and-evaluation" class="level2">
<h2 class="anchored" data-anchor-id="analysis-and-evaluation">Analysis and Evaluation</h2>
<p>Much of the content in this book resonated with me. Newport takes a contrarian view of many modern professional practices, such as structuring your day around group ceremonies like stand ups or scrums, maintaining open channels of communication via Email and instant messaging applications, and as mentioned above, social media channels. Many I.T. professionals will find their progress hampered by a menagerie of ceremonies, administrative tasks and meetings of ambiguous impact. Understanding how to categorise such meetings and structure your day around your deep work goals is what Newport hopes to espouse. This has been a consistent feature of my data-related roles throughout my career. Striking that balance of engaging with stakeholders versus undertaking the work can all too often result in a fractured day with little developmental progress.</p>
<p>That’s not to say that Newport promotes a hermetic approach to work. It’s clear to most that the tool, statistic or analysis that is being developed can only be effective if it is useful. Newport states that these ‘shallow’ tasks should be kept in check. They should be minimised and must earn your attention. Placing a premium on your time and attention is at the core of the book’s message.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>“…for decisions that involve large amounts of information and multiple vague, and perhaps even conflicting restraints, your unconscious mind is well suited to tackle the issue.” <span class="citation" data-cites="DeepWork">[2, p. 145]</span></p>
</div>
</div>
<blockquote class="blockquote">
<p>Above, Newport summarises a high level takeaway from unconscious thought theory (UTT), which may present a theoretical basis for sleeping on a particularly challenging problem.</p>
</blockquote>
<p>A lot of what Newport writes has rung true in my experience. While not all jobs have the same requirements, my roles in data have all required a deep focus disposition. In fact, some of the strategies that the author suggests for optimising your day, I had independently arrived at. Approaches such as starting your day before the rest of the office has woken up and keeping Email responses process-related have both served me well in my career progression so far. But, there are some suggested strategies that I have not quite been convinced of. At one point, Newport discusses cognitive strategies for extending your capacity for deep concentration. The suggested approach is to remember the order of a shuffled deck of cards. Newport outlines a method for doing so and cites some studies that are indicative of the positive relationship between such activities and the mental fortitude required for deep focus. Personally, I would sacrifice too much time in achieving such a feat, whereas I would gain more by implementing the task at hand, gradually incrementing my exposure to deep concentration sessions. Newport does state that this sort of thinking misses the point entirely, and that investing effort in such a mental feat pays dividends in the longer term, though I have yet to be convinced of this claim.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>“…attention restoration theory (ART), which claims that spending time in nature can improve your ability to concentrate. This theory… is based on the concept of attention fatigue. To concentrate requires what ART calls <em>directed</em> <em>attention</em>. This resource is finite: If you exhaust it, you’ll struggle to concentrate.” <span class="citation" data-cites="DeepWork">[2, p. 147]</span></p>
</div>
</div>
<blockquote class="blockquote">
<p>I found this concept to be very interesting, and a little concerning. Managing burnout is something that I value. It seems that my pasttimes also require directed attention, and that perhaps I should pursue recreational activities that contrast with my professional interests. I have decided to note within my journal when I notice that I am lacking energy and to resolve to take a bike ride, swim or just a walk in order to efefctively disconnect and recharge.</p>
</blockquote>
<p>At times throughout the book, I did find myself reflecting that some of the claims or advice were not as generalisable as the author had perceived. At one point for example, the Newport suggests diagnosing whether your workplace can support a culture of deep concentration and finding alternative employment if the answer was a clear enough ‘no’. This did strike me as something that many colleagues could only dream of, with the reality of bills to pay, children to feed and job security in an uncertain sector. Advising people to leave rather than finding alternative strategies to influence managerial culture does seem a bit thoughtless.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>“Professional E-mail Sorting: Do not reply to an e-mail message if any of the following applies:</p>
<ul>
<li>It’s ambiguous or otherwise makes it hard for you to generate a reasonable response.</li>
<li>It’s not a question or proposal that interests you.</li>
<li>Nothing really good would happen if you did respond and nothing really bad would happen if you didn’t.” <span class="citation" data-cites="DeepWork">[2, p. 255]</span></li>
</ul>
</div>
</div>
<blockquote class="blockquote">
<p>I find this advice to be a bit myopic. This is likely great advice for an accomplished academic with a strong internal locus of control. Junior entrants to a profession typically need to prove their utility to those with greater power around them - the decision makers that could be on their next promotion panel. Ignoring Emails that are a bit ambiguous could result in passing up an oportunity to help a colleague, forge a new professional relationship or prove your worth in the workplace. Rather than approaching the needs of others with derision, I would instead advise time-boxing a response and communicating your needs clearly to the other party. Something like - ‘I’m a bit pushed for time right now and am not familiar with the context, but if you can point me to a briefing note I can get back to you on Monday, once I’ve cleared off my backlog’.</p>
</blockquote>
<p>Another feature of this book which that requires some scepticism is in the outcomes of studies used to underpin the attitudes and strategies promoted as good practice. It’s likely no news to you that the behavioural sciences has attracted a fair amount of criticism about the reproducibility of published findings over the last decade. Coupled with the widespread publication bias encountered in academic journals <span class="citation" data-cites="BMJPubBias">[3]</span> and confirmation bias abound in the field of psychology, I would suggest the author reveal some of the research that they have undertaken in validating the claims of the studies. It is unlikely that the average reader will have the necessary time to carry out their own investigation of the findings, and doubt in the ability to evidence some of the claims within the book is introduced. I do not wish to sound like I am criticising the author for choosing studies that help to evidence their claims, as I would have criticised them for not doing so had that been the case. I would ask that the author publishes their attempts to prove the hypotheses considered.</p>
<blockquote class="blockquote">
<p>“Don’t trust everything you read in the psychology literature. In fact, two thirds of it should probably be distrusted.” <span class="citation" data-cites="NatureReproducibility">[4]</span></p>
</blockquote>
</section>
<section id="comparisons" class="level2">
<h2 class="anchored" data-anchor-id="comparisons">Comparisons</h2>
<p>There are some obvious comparisons with other productivity self-help books. One of the most obvious is in Stephen Covey’s The 7 Habits of Highly Effective People <span class="citation" data-cites="Covey">[5]</span>. Both books make an effort to discuss the management of competing priorities and how to go about organising your working day around prioritised, impactful goals. Covey’s book dedicates more energy towards effectively triaging tasks and charting progress made against longer-term priorities than what is explored within Deep Work. In fact, this may be another presumption made by Newport - that the direction of progress is obvious to the reader and it is simply a matter of finding the undisturbed time to do the work. As many of us will encounter uncertainty and a fair amount of strategic thrashing in our working lives, this could prove to be a limiting assumption.</p>
<p>Below is an example of what is commonly referred to as a “Covey Quadrant”, a rubric for efficiently categorising tasks along dimensions of urgency and importance.</p>
<p><img alt="Covey quadrant, creative commons." src="https://thedatasavvycorner.netlify.app/book-reviews/https:/upload.wikimedia.org/wikipedia/commons/thumb/3/33/7_habits_decision-making_matrix.png/596px-7_habits_decision-making_matrix.png?20181120003806" width="400" class="center"></p>
</section>
<section id="recommendation" class="level2">
<h2 class="anchored" data-anchor-id="recommendation">Recommendation</h2>
<p>There is a lot of wisdom to be gleaned from this book. Sure, some of it may be anecdotal and won’t be true in all cases. But there is an undeniable pattern in the examples provided, that sustained effort yields desirable outcomes. This is something that I have always found to be true and connects with my wider values. It is this message and the useful reminders and strategies that would form the basis of my recommendation for this book. This book is an opportunity to gain insight into how the elite of the achievers in society get things done. You may be able to make some of this work for you but don’t expect it to be easy, or perhaps even achievable in your current situation.</p>
<p>To put it bluntly, if you have ever struggled to quiet the noise at work and get things done, then this book is for you. (It’s not lost on me that that may qualify pretty much everyone who has ever worked in an office).</p>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body">
<div id="ref-CalNewport" class="csl-entry">
<div class="csl-left-margin">[1] </div><div class="csl-right-inline">Cal Newport, <span>“Calnewport.com.”</span> <a href="https://calnewport.com/">https://calnewport.com/</a></div>
</div>
<div id="ref-DeepWork" class="csl-entry">
<div class="csl-left-margin">[2] </div><div class="csl-right-inline">Cal Newport, <em><span>Deep Work</span></em>. PIATKUS, 1997.</div>
</div>
<div id="ref-BMJPubBias" class="csl-entry">
<div class="csl-left-margin">[3] </div><div class="csl-right-inline">Evelyne Decullier &amp; François Chapuis, <span>“BMJ 2005;331:433.”</span> <a href="https://www.bmj.com/rapid-response/2011/10/31/what-publication-bias">https://www.bmj.com/rapid-response/2011/10/31/what-publication-bias</a></div>
</div>
<div id="ref-NatureReproducibility" class="csl-entry">
<div class="csl-left-margin">[4] </div><div class="csl-right-inline">Monya Baker, <span>“Nature.com.”</span> <a href="https://www.nature.com/articles/nature.2015.18248">https://www.nature.com/articles/nature.2015.18248</a></div>
</div>
<div id="ref-Covey" class="csl-entry">
<div class="csl-left-margin">[5] </div><div class="csl-right-inline">Stephen R. Covey, <em><span class="nocase">The Seven Habits of Highly Effective People</span></em>. <span>Free Press</span>, 2004.</div>
</div>
</div></section></div> ]]></description>
  <category>Self-Help</category>
  <category>Productivity</category>
  <category>Business</category>
  <category>Psychology</category>
  <category>Philosophy</category>
  <guid>https://thedatasavvycorner.netlify.app/book-reviews/01-deep-work.html</guid>
  <pubDate>Sun, 10 Sep 2023 06:29:22 GMT</pubDate>
  <media:content url="https://upload.wikimedia.org/wikipedia/commons/thumb/0/0f/Fanal%2C_Seixal%2C_Madeira_-_2021-09-19_-_IMG_7200.jpg/800px-Fanal%2C_Seixal%2C_Madeira_-_2021-09-19_-_IMG_7200.jpg?20220630234019" medium="image"/>
</item>
<item>
  <title>Let’s Build a Basic Python Shiny App</title>
  <dc:creator>Rich Leyshon</dc:creator>
  <link>https://thedatasavvycorner.netlify.app/blogs/02-getting-started-pyshiny.html</link>
  <description><![CDATA[ 



<section id="getting-to-grips-with-python-shiny." class="level2">
<h2 class="anchored" data-anchor-id="getting-to-grips-with-python-shiny.">Getting to grips with Python Shiny.</h2>
<figure class="center figure">
<img class="shaded_box figure-img" src="https://thedatasavvycorner.netlify.app/blogs/https:/c0.wallpaperflare.com/preview/564/703/665/school-coding-software-development-education.jpg" alt="Woman Instructing On Laptop." width="300px">
<figcaption class="figure-caption">
Source: <a href="https://www.wallpaperflare.com/" class="uri">https://www.wallpaperflare.com/</a>. Creative Commons License.
</figcaption>
</figure>
<p>This tutorial is intended for those who are already familiar with Python, but may be less familiar with dashboarding and Shiny in Python. It may also be of interest to those who are well-versed in RShiny and would like to see how it has been implemented in Python.</p>
<p>This is a light-weight, introductory Python Shiny tutorial. No installation of software is required, other than a web-browser (which you must already have) and a willingness to experiment. We will use the shinylive service to display the application that we write and steadily add to a basic app, discussing some of the concepts as we go. Finally, let’s regroup and reflect on some coping techniques for when you begin writing your own Python Shiny apps.</p>
<p>This tutorial will not attempt to reproduce any of <a href="https://shiny.posit.co/py/">Posit’s documentation</a>, which is rather excellent so please check that out. Also, if you would prefer a conceptual treatment of Python Shiny, please see my blog on <a href="01-state-of-pyshiny.html">The Current Stateof Python Shiny</a>.</p>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
How to…
</div>
</div>
<div class="callout-body-container callout-body">
<p>Feel free to tinker with the code in the following example apps and then press play in the top-right hand corner of the console interface. Don’t worry - you won’t break anything important. To reset the code, simply refresh your web page.</p>
<p>If the app doesn’t launch, you’ll see some spinning grey hexagons that never go away <i class="fa-regular fa-face-sad-tear fa-bounce fa-lg"></i>. This is likely to be a problem with permissions in your browser. But you can click on the collapsible code block below the app windows and copy the code to an app.py file on your computer. If you have python and python shiny installed, you should be good to go.</p>
</div>
</div>
<section id="hello-python-shiny-fa-brands-python" class="level3">
<h3 class="anchored" data-anchor-id="hello-python-shiny-fa-brands-python">Hello Python Shiny! <i class="fa-brands fa-python" aria-label="python"></i></h3>
<p>Below is a really minimal app that doesn’t do very much at all. The python code is presented on the left. The interactive app is presented on the right. You can type into the app’s text field, and that’s about it for now.</p>
<div class="centerdiv">
<p><iframe src="https://shinylive.io/py/editor/#code=NobwRAdghgtgpmAXGKAHVA6VBPMAaMAYwHsIAXOcpMAYgEYACASRlWICcyGZiATAVwA2cAM4MyxBgAs4g1A35iARvwCWg3g2L92DNKgA6EAGbtiMBiKmqI2BqtYcuavAwCC6I0ZoA9VPzIyGwBzcWsIYLEoJWIANzgwhP1uOCgIMTIZO0I0hiUEqyh2OE18sgB3OEoGbG1dNT0ITRE4dnj2L2h0AH0GgF4FVSwoYLhu40E1XgAKIwYGGgAmPUFBLWNEhlk4eHIxWv4GctUrcUkrYnKauoUW3QuhTWDJY8ybTbU5+cGMG38yboUAAeZFmEG+EPsvD6BkgsDGlDI7GwsLwX0hDEE0VkMLAAAVhFAWltyK1rjoGNB4Kj0ZDUFjCHApMQNK1cQBNG5UhIyYqw2kQgCURmFECMvDgGzu7WmfwCrm0ZH+rhaIhEqlIgsQXxoAGYwid7GJyryEgddMlBMRgqpCJZmY8GM8MAwAMqSYxFVwQYhcGD8QhSDDB2nFMg6cEAOVIcC+3gYADEbFBVnYALQG5SqLioKCEADWI1ECnkNwaaWarXaLtd-FQZIcbE4aS4Gez3EUZHj+Up8M0AAN9P2MEZkgMPKhpvpeqoVVXWoKwABfAC6QA" title="Getting Started with a basic Python Shiny App."></iframe></p>
</div>
<div class="cell" data-execution_count="1">
<details>
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#1 Import modules to help us build our app</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> shiny <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ui, App</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#^putting things above the app means they can be shared between your ui and server</span></span>
<span id="cb1-5"></span>
<span id="cb1-6">app_ui <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ui.page_fluid(</span>
<span id="cb1-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#2 all of the elements you wish to show your user should go within the ui</span></span>
<span id="cb1-8">    ui.input_text(</span>
<span id="cb1-9">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name_entry"</span>,</span>
<span id="cb1-10">        label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Please enter your name"</span>,</span>
<span id="cb1-11">        placeholder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Your name here"</span></span>
<span id="cb1-12">        )</span>
<span id="cb1-13">)</span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> server(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>, output, session):</span>
<span id="cb1-16">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#3 this is where your app logic should go. So far, not much...</span></span>
<span id="cb1-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-18">  </span>
<span id="cb1-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Finally - this bit packages up our ui and server. Super important - it must</span></span>
<span id="cb1-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># be named `app`.</span></span></code></pre></div>
</details>
</div>
<p>You’ll see that the code defines an <code>app_ui</code> object, which is a Shiny ui instance. Within that <code>ui.page_fluid()</code> function, we can specify all the elements of the app that we would like to present to our users.</p>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
On Users…
</div>
</div>
<div class="callout-body-container callout-body">
<p>There are only two industries that call their customers “users”: illegal drugs and software – Edward Tufte</p>
</div>
</div>
<p>So far, only one simple ui element has been defined. The humble text input <code>ui.input_text()</code> which allows our users to place their own text into a text field.</p>
<p>Notice that in Python, all the inputs begin with <code>input...</code>. There’s <code>ui.input_text()</code> as we’ve seen, but there’s lots more. <code>ui.input_date()</code>, <code>ui.input_file()</code> and <code>ui.input_slider</code> to name a few. This consistent syntax approach is a subtle improvement over RShiny and makes it so much easier to work with the vast array of widgets without having to remember them all. If you’re working in a modern editor such as <a href="https://code.visualstudio.com/">Visual Studio Code</a>, simply typing <code>ui.input</code> will remind you of all the options available to you. For those not working in a nice GUI like VSCode, a <a href="https://raw.githubusercontent.com/rstudio/cheatsheets/main/shiny.pdf">Shiny cheatsheet</a> may be useful, though note that at the time of writing I could only find R-flavoured ones…</p>
<p>All ui input elements start with the same 2 arguments, <code>id</code> and <code>label</code>:</p>
<ul>
<li><code>id</code>: The internal name of the input. What does that mean? Call it what you like. Whatever you choose, be aware that when you want to use the values from the text input to do something in the server, it’s this name that you will need to reference.</li>
<li><code>label</code>: A short piece of text that prompts your user to do something. This will be displayed in your ui above the input element.</li>
</ul>
</section>
<section id="doing-something-with-the-shiny-server." class="level3">
<h3 class="anchored" data-anchor-id="doing-something-with-the-shiny-server.">Doing Something With the Shiny Server.</h3>
<p>Unfortunately, so far our app doesn’t actually do much. Typing into the empty text field yields no result. That’s because right now, our <code>server</code> function simply returns <code>None</code>. Let’s resolve this.</p>
<div class="centerdiv">
<p><iframe src="https://shinylive.io/py/editor/#code=NobwRAdghgtgpmAXGKAHVA6VBPMAaMAYwHsIAXOcpMAYgEYACAV1QBMoKGyALOBgSxipiAJzIMAzmQ5x45LsQERCAGyas+AAxGUNIzQxjFWTFXAA6EAGYjiMSd34RsAoaPFN+eBgEF03nQg9S0s0VAB9TwYAXmZ+LCgAczhwqzV+VgAKSwZcuIwnVCYycIoADzJsiDyagVZo80hYFMoyEWxGvBza3JUoACM4FQawAAUzKAk+VrgRBmxiJjnoeE7untQ+wjhuYhU9EYBNReXmhl4dRvXagEou6ryaACYGAEllNQ0GKDiGRbIiuIhrJWhgGAAVRwSBgAd34KhUDmIMK4vAYhCgKkIpg4-FIEmuNEMUC+TlRfCmIgAbrMGP0oIQANYKcnMSkYa6eDD-QGlOAVcI0kT0siCbJgRI6OCiiCJRp3Sw3EJBOBWSSzIWZQrFbw8nXqiQSPEQG6IQkAZgYAFU2DJWZShbD+DxvgwrExlKLSKiOOcoEEzNCeHxyuIdBJhBAphyHrkAAJ68REphTVmJhgaEgiDiiFkwKAiZk8fjQ92e43XOOBPQYUMMImYiSKCBwOCsFmUCRLPgwvgpkNorM6Qhh3S0zOiHMia4aNWS1syxKZU3XGpXMBXWO1SElt0ekfGp0IrhQRkDvjp4hq4P5bUlUPLhjAuRke49XJWUT58Q3qQiJyJEorrCCozoUjMyh8P67afiI34COIkzfNUAAS4IALIADKrnk6awayURkIoEi7DCMbvgw66bhROhkEs1RWI0KH8AwIB3hgKwtOQ7TLgAvt4vZYnYIaKKM2A8N6ADKjjOByG4QKE6AxL46CZGEkReOq1KzDcYC8QAukAA" title="Basic Server Functionality in a Python Shiny App."></iframe></p>
</div>
<div class="cell" data-execution_count="2">
<details>
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#1 update the import statement to include `render` module</span></span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> shiny <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ui, App, render</span>
<span id="cb2-3"></span>
<span id="cb2-4">app_ui <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ui.page_fluid(</span>
<span id="cb2-5">    ui.input_text(</span>
<span id="cb2-6">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name_entry"</span>,</span>
<span id="cb2-7">        label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Please enter your name"</span>,</span>
<span id="cb2-8">        placeholder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Your name here"</span></span>
<span id="cb2-9">        ),</span>
<span id="cb2-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#2 Include a ui output element. This will show the calculations</span></span>
<span id="cb2-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># made in the server back to the user.</span></span>
<span id="cb2-12">    ui.output_text_verbatim(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"greeting"</span>),</span>
<span id="cb2-13">)</span>
<span id="cb2-14"></span>
<span id="cb2-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> server(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>, output, session):</span>
<span id="cb2-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#3 Update the server with a function that handles the text response.</span></span>
<span id="cb2-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@output</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use the output decorator to mark this function</span></span>
<span id="cb2-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@render.text</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># also need to ensure we use the correct render decorator</span></span>
<span id="cb2-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> greeting():</span>
<span id="cb2-20">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb2-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        This function will take the output of the ui.input_text() element,</span></span>
<span id="cb2-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        format the string in a polite sentence and format it as an HTML</span></span>
<span id="cb2-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        output for the ui to show.</span></span>
<span id="cb2-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb2-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Hi </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name_entry()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, welcome to Python Shiny."</span></span>
<span id="cb2-26"></span>
<span id="cb2-27">app <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> App(app_ui, server)</span></code></pre></div>
</details>
</div>
<p>There’s quite a lot going on in the above code chunk. Let’s start with the decorators <code>@output</code> &amp; <code>@render.text</code>:</p>
<ul>
<li><code>@output</code>: Any function marked with this decorator will have its returned value made available to the user interface. Notice that in the line <code>ui.output_text_verbatim("greeting")</code> we are able to call on the values of the server’s <code>greeting()</code> function that we marked as an <code>@output</code>.</li>
<li><code>@render.text</code>: This tells Shiny what type of output to handle. Is it text, a chart (<code>@render.plot</code>) or something more fancy, like dynamically rendered ui (<code>@render.ui</code>). These output types all have their corresponding output functions to use in the ui. Here we called <code>ui.output_text_verbatim()</code>.</li>
<li>Calling the wrong ui-side function may not result in an error, but can have unexpected results, such as your text disappearing from your app. Keep an eye out for that if things aren’t working - are you using the correct combination of <code>render</code> in the server with <code>output_...</code> in the ui?</li>
</ul>
<p>Did you notice anything off-putting about the above code? Yes, too many comments but please indulge me. Functions in the server and ui are passing values back and forth. That can be a bit overwhelming to get your head around when you’re new to what’s known as ‘event-driven programming’. All that means is that the program needs to respond to some action taken by the user. The syntax in which you reference the functions is a bit inconsistent to my mind. Let’s take a closer look:</p>
<p>If I mark some function <code>make_plot()</code> in the server as an <code>@output</code> and then wish to call on its value within the ui, I need to use <code>ui.output_plot("make_plot")</code>. Notice the lack of brackets following the function name <code>"make_plot"</code>. Getting this wrong will result in a <code>ValueError</code>. Forgetting to wrap the function reference in a string will result in a <code>NameError</code>.</p>
<p>Now in the other direction, perhaps we have a numeric input passing integer values from the user to the server. We’ll give the slider widget the <code>id="int_slider"</code>. Now when we want to use the value of this slider on the server-side, we use a different syntax:</p>
<pre><code>def print_selection():
    n = int_slider()
    return f"You chose {n}!"</code></pre>
<p>Notice this time, we include brackets after our call to the widget id: <code>n = int_slider()</code>. Weird, right? Getting this wrong may result in unexpected behaviours. Keep an eye out for this. Also, wrapping server id references in speech marks results in unexpected behaviours, but not necessarily errors.</p>
<p>If I haven’t lost you yet, well done! Debugging applications can be a very frustrating process - part intuition earned from hours of Shiny debugging, part <a href="https://stackoverflow.com/">Stack Overflow</a> and part coping mechanisms. I’ll cover some of those in the Tips section.</p>
<section id="exercise" class="level4">
<h4 class="anchored" data-anchor-id="exercise">Exercise</h4>
<p>Try modifying the app provided in the previous examples to repeat the greeting a number of times specified by the user.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Hints. Click to expand if needed.
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li>You will need to include a UI input that will collect numbers from the user.</li>
<li>Update the <code>greeting()</code> function to return multiples of the greeting string.</li>
<li>Explore the other text output functions to avoid the message being truncated.</li>
<li>If you’re stuck, click on “Show the code” to see a solution.</li>
</ul>
</div>
</div>
</div>
<div class="centerdiv">
<p><iframe src="https://shinylive.io/py/editor/#code=NobwRAdghgtgpmAXGKAHVA6VBPMAaMAYwHsIAXOcpMAMwCdiYACAZwAsBLCbJjmVYnTJMAgujxM6lACZw6EgK4cAOhFVpUAfSVMAvEyVYoAcziaaAGyXSAFAEpVjiLJqs5ANzk2uqBWQnEfr7+biwsHKR2iKpMsZJwZAp0EEwAcqRwTuroeqLoNhraHBIsHnIOEGAAvgC6QA" title="Exercise 1 - repeat a message."></iframe></p>
</div>
<div class="cell" data-execution_count="3">
<details>
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> shiny <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ui, App, render</span>
<span id="cb4-2"></span>
<span id="cb4-3">app_ui <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ui.page_fluid(</span>
<span id="cb4-4">    ui.input_text(</span>
<span id="cb4-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name_entry"</span>,</span>
<span id="cb4-6">        label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Please enter your name"</span>,</span>
<span id="cb4-7">        placeholder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Your name here"</span></span>
<span id="cb4-8">        ),</span>
<span id="cb4-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1 update the UI with a way of taking numbers from the user. Here I use a</span></span>
<span id="cb4-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># slider, but a numeric input or even radio buttons would also work.</span></span>
<span id="cb4-11">    ui.input_slider(</span>
<span id="cb4-12">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n_greetings"</span>,</span>
<span id="cb4-13">        label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"number of greetings"</span>, value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, step<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb4-14"></span>
<span id="cb4-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#2 Change to output_text instead of output_text_verbatim, which uses strict</span></span>
<span id="cb4-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># rules for word wrapping and would hide most of a long greeting.</span></span>
<span id="cb4-17">    ui.output_text(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"greeting"</span>),</span>
<span id="cb4-18">    ui.tags.br()</span>
<span id="cb4-19">)</span>
<span id="cb4-20"></span>
<span id="cb4-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> server(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>, output, session):</span>
<span id="cb4-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@output</span></span>
<span id="cb4-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@render.text</span></span>
<span id="cb4-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> greeting():</span>
<span id="cb4-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb4-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        This function will take the output of the ui.input_text() element,</span></span>
<span id="cb4-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        format the string in a polite sentence and format it as an HTML</span></span>
<span id="cb4-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        output for the ui to show.</span></span>
<span id="cb4-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb4-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># multiply the greeting string by the number of times the user asked</span></span>
<span id="cb4-31">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Hi </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name_entry()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, welcome to Python Shiny."</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>.n_greetings()</span>
<span id="cb4-32"></span>
<span id="cb4-33">app <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> App(app_ui, server)</span></code></pre></div>
</details>
</div>
</section>
</section>
<section id="ready-steady-go" class="level3">
<h3 class="anchored" data-anchor-id="ready-steady-go">Ready, Steady, Go!</h3>
<p>One final adjustment to this app. When you’re typing a name into the text input field, there’s a bit of a race going on. Can you type faster than the server can render the text? This may not be what you want. In fact, you may require a bunch of selections to be made prior to calculating anything in the server. We can use methods to interrupt and isolate elements of the server. In effect, we can tell any of our server functions to hang fire until a certain condition is met. In this example, we’ll try out perhaps the simplest way of achieving this, enter the <code>ui.input_action_button()</code>.</p>
<div class="centerdiv">
<p><iframe src="https://shinylive.io/py/editor/#code=NobwRAdghgtgpmAXGKAHVA6VBPMAaMAYwHsIAXOcpMAYgEYACASRlWICcyGyALOB9nCiEyASwBu-GMQAmAVwA2-AGbtiMBgGUeoiNgA6EVeoYBnHXoajWHLnNF4BlGXHaOAgukeDhYyYcM0VAB9ewYAXgZ7LCgAczhg5QV7GQAKQwZMqNEMXVQ5MmCKAA8ydIgsyqsZcP1IWATKMnYDfAyqzIUoACM4BVqwAAUlKFN+JtcGbGI5dgZoeDq8do7ULsI4HmIFF3YBgE0ZuYX+PkE6laqASmWKrJoAJgYoGRlnit9RUgZugrJv-7cPjZRwwOSEHgMBSiADW-AA7vwZKI3vDRLwgfwSlw8gVLtFcYVPqRgr8yP8IKkUQNYsRSX9SEsoT0+gMAMLQwgw7jEARyCAYQV1G6XGjPV5mdT8cSiUxyKAKMxwVBQdhQMQA3m8LFwUoMGZkfJkfE5MhxUwYbrsVIiu6ZaJm2IWq0224mjAGo1FXWFSTsbrq6zpMCxQRwMQQWLC25XAIQFzKJXsP1UiBGxyegqOMamUxfCBXRCigDM4reUA+r3R+YVDBgqu5vQUxHhmP12vYpkuAAFM8a7Qxu4J464MNiez4RBI4Bg4JJyKmjRhafTyaRYwOEwxQ3Bw7pYjaiwPKoIyLMKso6gAJUQMECEjAnYJNFo2gC+jkRChI8B5DEG2C8N82i6NgGAXBAhhigAKjophWPBUBaBYYGeKg+rdAAVnAIgYMwXBgqYXC9PMDRvAABkE5HgdA6ARAwaGpEEoQOEmfobmAb4ALpAA" title="Control the Reactive Flow With the Action Button."></iframe></p>
</div>
<div class="cell" data-execution_count="4">
<details>
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#1 Import the reactive module from Shiny</span></span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> shiny <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ui, render, App, reactive</span>
<span id="cb5-3"></span>
<span id="cb5-4">app_ui <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ui.page_fluid(</span>
<span id="cb5-5">    ui.input_text(</span>
<span id="cb5-6">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name_entry"</span>,</span>
<span id="cb5-7">        label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Please enter your name"</span>,</span>
<span id="cb5-8">        placeholder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Your name here"</span></span>
<span id="cb5-9">        ),</span>
<span id="cb5-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#2 add an action button to the ui, much like we did with the text input</span></span>
<span id="cb5-11">    ui.input_action_button(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"go_button"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Click to run..."</span>),</span>
<span id="cb5-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add some visual separation to the text output</span></span>
<span id="cb5-13">    ui.tags.br(),</span>
<span id="cb5-14">    ui.tags.br(),</span>
<span id="cb5-15"></span>
<span id="cb5-16">    ui.output_text_verbatim(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"greeting"</span>),</span>
<span id="cb5-17">)</span>
<span id="cb5-18"></span>
<span id="cb5-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> server(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>, output, session):</span>
<span id="cb5-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#3 add an additional mark below the others</span></span>
<span id="cb5-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@output</span></span>
<span id="cb5-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@render.text</span></span>
<span id="cb5-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@reactive.event</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>.go_button)</span>
<span id="cb5-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> greeting():</span>
<span id="cb5-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Hi </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name_entry()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, welcome to Python Shiny."</span></span>
<span id="cb5-26"></span>
<span id="cb5-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This is a Shiny.App object. It must be named `app`.</span></span>
<span id="cb5-28">app <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> App(app_ui, server)</span></code></pre></div>
</details>
</div>
<p>You should now see that an input button has appeared and the sentence won’t get printed out until you press it.</p>
<p>Also notice that the inconsistency in how to refer to functions on the other side of the ui:server divide rears its head once more. All in the server, when we want to use the values returned by the text input, we use the syntax <code>input.name_entry()</code>. When we want to use the action button in the reactive decorator, we have to use <code>input.go_button</code> - no parenthesis! The docs describe this as when you need to access the returned value versus when you need to call the function. This does make sense but can introduce some cognitive conflict while you are working with Shiny. I hope by version 1.0 the development team can find a way to simplify things.</p>
<p>I also included some visual separation between elements in the ui by using <code>ui.tags.br()</code>. If you know a little HTML, you may get excited at that. You can access all the typical HTML tags in this way:</p>
<div class="centerdiv">
<p><iframe src="https://shinylive.io/py/editor/#code=NobwRAdghgtgpmAXGKAHVA6VBPMAaMAYwHsIAXOcpMAMwCdiYACAZwAsBLCbJjmVYnTJMArhzxMAgugl1KAEzh0AOhFVpUAfTFMAvKI5YoAcziaaAGzHyAFKqYODGMiZYY2ARjthJTC3AA3OAsmDyY2OCh5LmNlMABKPHtHMWdXdwAmb19-IJCM8MjoiFiEpIhHJxdjNwAjOhtE5IdU6rdUbwBlRjgmCgAPYTiJVvSWMgYS7y4mWuILeQwluPj41VU1tQhFGlYlIIauVBEyCWIT49O9lhYOUnjEZqY5MhE6CoA5Ujh16HQ9KToGwabTiPZ0A7xMAAXwAukA" title="Displaying DOM elements with Shiny Tags."></iframe></p>
</div>
<div class="cell" data-execution_count="5">
<details>
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> shiny <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ui, App, render</span>
<span id="cb6-2"></span>
<span id="cb6-3">app_ui <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ui.page_fluid(</span>
<span id="cb6-4">    ui.tags.h1(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A level 1 heading"</span>),</span>
<span id="cb6-5">    ui.tags.h2(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A level 2 heading"</span>),</span>
<span id="cb6-6">    ui.tags.br(),</span>
<span id="cb6-7">    ui.tags.p(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Some text "</span>, ui.tags.strong(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in bold..."</span>))</span>
<span id="cb6-8"></span>
<span id="cb6-9">)</span>
<span id="cb6-10"></span>
<span id="cb6-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> server(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>, output, session):</span>
<span id="cb6-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb6-13"></span>
<span id="cb6-14">app <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> App(app_ui, server)</span></code></pre></div>
</details>
</div>
<section id="exercise-1" class="level4">
<h4 class="anchored" data-anchor-id="exercise-1">Exercise</h4>
<p>Do you know enough markdown syntax to convert the ui below from HTML tags into markdown? This will greatly simplify the code. You will need to use <code>ui.markdown("""some multiline markdown""")</code> to achieve that.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Hints. Click to expand if needed.
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li>You can use this <a href="https://www.rstudio.com/wp-content/uploads/2015/02/rmarkdown-cheatsheet.pdf">markdown cheatsheet</a> to help.</li>
<li>If you’re stuck, click on “Show the code” to see an example solution.</li>
</ul>
</div>
</div>
</div>
<div class="centerdiv">
<p><iframe src="https://shinylive.io/py/editor/#code=NobwRAdghgtgpmAXGKAHVA6VBPMAaMAYwHsIAXOcpMAYgEYACASRlWICcyGyALOB9nCiEyASwBu-GMQAmAVwA2-AGbtiMBgGUeoiNgA6EVeoYBnHXoajWHLnNF4BlGXHaOAgukeDhYyYcM0VAB9ewYAXgZ7LCgAczhg5QV7GQAKQwZMqNEMMjjTDB46dLAACTgFBWIGAAVsXlItC2wAQn0wAEo8DKzovNiCgCN2VK6AiCzs3PysdInJrPaAFR1TBnbu+YWp-oLTMjUIWJLTa1QlBiCFUUIoMVJ2sa2F9oYAd1FKhlR2XS5sYhyS4MWKCOBiI4YR6bSZ9GbEBSpOEDDDXEoAUXIrgYALk7AY0Hg0J2MzR7UI10IAGsBHIII8nrCcrtZj1tu0akooKZ+OJRKcuBs2QtolBUiB2jxBMp2oh1mAeGQyKhTIgAPRqmR3bmEUSUQhwW6sOQFWKiXhyQYYUTENXtAC+jnapnU-DecEGArg0OFk1eyg4DGkgisRg4MDuNvpnRhvWZMylo02wuF0V0qDkZGCFAAHmQ5ttMqIZOF2oSEpQDgZ8L6sgooIMKqWwJyhDyGJXsbj8eWhc9JudhHAeAiXOxmwBNQE92D8PiCdq1zKMrI0ABMlxkMkuE18UYYg0zZEax+4fGyjhgckIPAY1ypbv4MmL73Nt94-FzXHTmdTOR-WZ7qQwSHkqpCpMWzaxMQIFHg8+B3g2TbtAAwpSNKnuwdIYDhPrPDQm7bi68AMHyphyFAChmHAqBQOwkYntUH7cHAeYMICyq-s8yJDCMK6ZDxGDDEm4xMhgHEZlmX7BJI7CDJGMAlKCcDgrosR4R04wuMo1HsLJEEQJJjgSZmjg8qYpykB0iDCjQADMhE7oR5pRpRQZ0TSjZVG8Z78MQH7sKYwoAAImWQIWCBAY65Kx4XPMFPgiBIcAYHAkjkAZkkYNBsFgRAmnPNpIJghCxzWUuThkHiEwymUogMCAAEYOWwSVuw2CjI67wVCQJGnnUDQTNoujYFCYDjARKz8lYaxQE0I0YJ4qDsYMABWhpkBgzBcFe+wHvw5bbgABkER1QtA6ARAwS2pEEoQOLpskFWA9oALpAA" title="Exercise 2 - convert ui from HTML to markdown."></iframe></p>
</div>
<div class="cell" data-execution_count="6">
<details>
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#1 Import the reactive module from Shiny</span></span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> shiny <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ui, render, App, reactive</span>
<span id="cb7-3"></span>
<span id="cb7-4">app_ui <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ui.page_fluid(</span>
<span id="cb7-5"></span>
<span id="cb7-6">    ui.markdown(</span>
<span id="cb7-7">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb7-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        # Hello Python Shiny!</span></span>
<span id="cb7-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        This **simple application** will print you a greeting.</span></span>
<span id="cb7-10"></span>
<span id="cb7-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        1. Enter your name</span></span>
<span id="cb7-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        2. Click run</span></span>
<span id="cb7-13"></span>
<span id="cb7-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        Please visit [some website](https://datasciencecampus.github.io/)</span></span>
<span id="cb7-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        for more information</span></span>
<span id="cb7-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        ***</span></span>
<span id="cb7-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        """</span>),</span>
<span id="cb7-18">    </span>
<span id="cb7-19">    ui.input_text(</span>
<span id="cb7-20">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name_entry"</span>,</span>
<span id="cb7-21">        label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Please enter your name"</span>,</span>
<span id="cb7-22">        placeholder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Your name here"</span></span>
<span id="cb7-23">        ),</span>
<span id="cb7-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#2 add an action button to the ui, much like we did with the text input</span></span>
<span id="cb7-25">    ui.input_action_button(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"go_button"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Click to run..."</span>),</span>
<span id="cb7-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add some visual separation to the text output</span></span>
<span id="cb7-27">    ui.tags.br(),</span>
<span id="cb7-28">    ui.tags.br(),</span>
<span id="cb7-29"></span>
<span id="cb7-30">    ui.output_text_verbatim(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"greeting"</span>),</span>
<span id="cb7-31">)</span>
<span id="cb7-32"></span>
<span id="cb7-33"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> server(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>, output, session):</span>
<span id="cb7-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#3 add an additional mark below the others</span></span>
<span id="cb7-35">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@output</span></span>
<span id="cb7-36">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@render.text</span></span>
<span id="cb7-37">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@reactive.event</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>.go_button)</span>
<span id="cb7-38">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> greeting():</span>
<span id="cb7-39">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Hi </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name_entry()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, welcome to Python Shiny."</span></span>
<span id="cb7-40"></span>
<span id="cb7-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This is a Shiny.App object. It must be named `app`.</span></span>
<span id="cb7-42">app <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> App(app_ui, server)</span></code></pre></div>
</details>
</div>
<p>So there you have it. A very basic application that can be used to print out some simple messages to your user. This is of course a trivial app in order to keep things basic for the purposes of this blog. If you’d like to investigate what’s possible with Shiny, I’d suggest taking a peek through the <a href="https://shinylive.io/py/examples/">Posit docs examples</a> and the <a href="https://shiny.posit.co/py/gallery/">Python Shiny gallery</a>. In the next section I’ll go over some tips that may help with common pitfalls I’ve encountered while working in Shiny.</p>
</section>
</section>
</section>
<section id="tips." class="level2">
<h2 class="anchored" data-anchor-id="tips.">Tips.</h2>
<section id="shiny-for-python-vscode-extension." class="level3">
<h3 class="anchored" data-anchor-id="shiny-for-python-vscode-extension.">Shiny for Python VSCode Extension.</h3>
<p>The <a href="https://marketplace.visualstudio.com/items?itemName=Posit.shiny-python">Shiny for Python</a> extension is a convenient way to launch Python Shiny apps. It adds a ‘Run Shiny App’ button to the VS Code interface, allowing for options to serve the app locally within a dedicated VS Code viewer window, or alternatively launch the app directly within your default web browser.</p>
<p>In order to run your application with this extension, you must ensure your app file is saved as <code>app.py</code>, otherwise the run button will not recognise that the currently selected document is a Shiny app.</p>
</section>
<section id="header-accessibility-adjustment." class="level3">
<h3 class="anchored" data-anchor-id="header-accessibility-adjustment.">Header Accessibility Adjustment.</h3>
<p>A big shoutout to Utah State University for making their fantastic suite of web accessibility-checking tools open source. These tools make checking the accessibility of your web products much easier. Simply visit the <a href="https://wave.webaim.org/">Web Accessibility Evaluation Tool (WAVE)</a> and enter a url under “Web page address:” and press return. The site will launch a helpful overlay on top of your specified url, highlighting accessibility alerts, warnings and features. There is also a sidebar helpfully explaining why the various alerts are important and what can be done to resolve them.</p>
<p>Unless you have managed to host a Shiny application on a service such as shinyapps.io, unfortunately you won’t have a url to pass to WAVE. Working locally on your machine, your locally hosted app interface will launch with a url like: http://localhost:… There is another way to use WAVE to check localhost sites. Using the <a href="https://wave.webaim.org/extension/">WAVE browser extensions</a> will allow you to launch the WAVE tool within any of your browser windows. This would allow you to run these checks locally on your machine while also ensuring that your app looks good on Chrome, Firefox or Edge. When checking basic Python Shiny apps for accessibility, one of the common accessibility errors you will encounter will be:</p>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Language missing or invalid!
</div>
</div>
<div class="callout-body-container callout-body">
<p>The language of the document is not identified or a lang attribute value is invalid.</p>
</div>
</div>
<p>This means a screen reader may not detect the language of the website content and may not work properly. The ideal scenario would be that Shiny would ask you to specify the language of the application that you are working in at the point where you create the application. It’s a straightforward fix though. We can include some tags at the top of our ui that will update the web page content with the required information:</p>
<div class="centerdiv">
<p><iframe src="https://shinylive.io/py/editor/#code=NobwRAdghgtgpmAXGKAHVA6VBPMAaMAYwHsIAXOcpMAMwCdiYACAZwAsBLCbJjmVYnTJMArhzxM6lACZw6EgILoJUqITIcAbnAA6EPWlQB9MUwC8ojligBzOEZoAbMdIAUepp6YBiJgunSTFBMbHBQsnRBEIEsqHCEHDQ8ZKFMjlAQNiK2cFGBGmSOcBgeXmIYZLYsGKHhcq7llTbVbGQwjq7pmWY6YJS9AJQSjVUVHIVw7mAKTABKYY6OPABCUCwchH7og0N6pZ7lXKgiZEYUAB5k7hBet7zSPZCw9pRkdNi9ePt36QBGcI5HgAFIprXKvORMbDEESRaDwT7fW6odKEOBsYiOCKPACaMLhzxCcl0YCRXl2NzKViOJyMag0pCMvxOZFIrg4D16NmITJZpE+aSg-0BvQAwo4NgBrJisyQiCAYRWDL6Ug5WJrVX50VwU24jZoYLU6lXfcowsjHU4XU7aOi-KAaGBTGxSOAaTLKvQDPbROA0VhyW3siCWiTm0MBljrUgDRDfAAC4ZOCakvroFTglxTYXUWmKcG05GDlow3N5ZFZEG9qqYsn9Lrgbq4Nh1cZrtykZFhNxovQAEhwmCAaWQMPCXuR3jqAL4SADuAJI8BlxCYQOwKVITAAypxuCVSfpoOhzFtUK5DCZxAG6Lbq2BpwBdIA" title="Add an Accessible Header to a Shiny App."></iframe></p>
</div>
<div class="cell" data-execution_count="7">
<details>
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> shiny <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ui, render, App, reactive</span>
<span id="cb8-2"></span>
<span id="cb8-3">app_ui <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ui.page_fluid(</span>
<span id="cb8-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add a header and specify the language and title.</span></span>
<span id="cb8-5">    ui.tags.header(ui.tags.html(lang<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"en"</span>), ui.tags.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A Really Basic App"</span>)),</span>
<span id="cb8-6"></span>
<span id="cb8-7">    ui.input_text(</span>
<span id="cb8-8">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name_entry"</span>,</span>
<span id="cb8-9">        label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Please enter your name"</span>,</span>
<span id="cb8-10">        placeholder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Your name here"</span></span>
<span id="cb8-11">        ),</span>
<span id="cb8-12">    ui.input_action_button(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"go_button"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Click to run..."</span>),</span>
<span id="cb8-13">    ui.tags.br(),</span>
<span id="cb8-14">    ui.tags.br(),</span>
<span id="cb8-15"></span>
<span id="cb8-16">    ui.output_text_verbatim(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"greeting"</span>),</span>
<span id="cb8-17">)</span>
<span id="cb8-18"></span>
<span id="cb8-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> server(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>, output, session):</span>
<span id="cb8-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@output</span></span>
<span id="cb8-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@render.text</span></span>
<span id="cb8-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@reactive.event</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>.go_button)</span>
<span id="cb8-23">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> greeting():</span>
<span id="cb8-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Hi </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name_entry()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, welcome to Python Shiny."</span></span>
<span id="cb8-25"></span>
<span id="cb8-26">app <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> App(app_ui, server)</span></code></pre></div>
</details>
</div>
</section>
<section id="missing-commas." class="level3">
<h3 class="anchored" data-anchor-id="missing-commas.">Missing Commas.</h3>
<p>One of the more frustrating aspects of debugging Shiny applications, particularly as the application grows, is that a single misplaced comma can completely break your application. The thing to look out for here is when you run your app and you get the unexpected <code>SyntaxError: invalid syntax</code> error. I recall this being a real headache when I was learning RShiny, so much so that I would leave a little comment after each comma reminding me of which element of the code was being closed within the preceding bracket.</p>
<p>The Python errors are really helpful. They not only point to a problem with the syntax, but they identify the line number in the app where the first instance of this issue was encountered.</p>
</section>
<section id="debugging-errors." class="level3">
<h3 class="anchored" data-anchor-id="debugging-errors.">Debugging Errors.</h3>
<p>At times it can be unclear why errors are being raised and it becomes important to investigate intermediate values that are being calculated in the server. Your usual python debugging tools may not work with Python Shiny. Shiny is event-driven and the reactive flow and order of the object definitions in your scripts are treated a bit differently. Without a tool like R’s <code>Reactlog</code> package, this is currently quite tricky to do in Python. The main coping mechanism available at the moment is to include some text outputs in the ui, paired with render text functions in the server. You can go ahead and use these elements to helpfully print out intermediate values such as DataFrame column names, data types etc and then comment them out when they’re no longer needed. Examining these intermediate values from within your ui is often the way to go when you can’t understand the root cause of your problem.</p>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Make a Reprex!
</div>
</div>
<div class="callout-body-container callout-body">
<p>One more approach to consider is to try to isolate your problem.</p>
</div>
</div>
<p>Sometimes it can be hard to build a mental picture of all the moving elements under the hood in your server, and how they may be unexpectedly interacting with each other. The problem you’re encountering may be due to these complex interactions in your server. Simply commenting out the code not directly related to the issue you are experiencing helps to triangulate the source of the issue within your reactive model. This is also the first step towards producing a <a href="https://community.rstudio.com/t/faq-whats-a-reproducible-example-reprex-and-how-do-i-create-one/5219">reprex</a> - a reproducible example. These should be as minimal as possible and are very helpful to start getting to the root of a programming problem.</p>
</section>
<section id="specifying-working-directory." class="level3">
<h3 class="anchored" data-anchor-id="specifying-working-directory.">Specifying Working Directory.</h3>
<p>This is more of a consideration for deployment to a service such as shinyapps.io than something you tend to encounter while learning the ropes. And you likely won’t encounter this issue if your <code>app.py</code> file is located in the top level of your project folder (also known as the project root). If your app is not in the root of the project folder, you may wish to include this snippet of code before you define your Shiny ui:</p>
<p><code>os.chdir(os.path.dirname(os.path.realpath(__file__)))</code></p>
<p>This ensures that the working directory is set to that of the <code>app.py</code> file when it runs. If you encounter pandas errors complaining about <code>FileExistsError</code> when you deploy your app to shinyapps.io but not when you locally run your application, this may be the fix you need. Also something to consider if your app is styled correctly locally but not when you deploy. Potentially a relative path to a dedicated stylesheet has broken.</p>
<p>One more thing on deploying your app - if you do intend to host your app for others to use, I cannot emphasise this enough:</p>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Deploy Your App Early!
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
<p>Deployment of applications is not a straight forward, half an hour job. There are often inconsistencies to iron out between the environment you developed the app in and the server that will be running the remote app for your users. Deploy your app early when it is basic and you can catch these inconsistencies as you go. Or don’t and ignore the pile of technical debt your project is accruing. These are your choices.</p>
</section>
</section>
<section id="in-review." class="level2">
<h2 class="anchored" data-anchor-id="in-review.">In Review.</h2>
<p>We have written a very basic application that is not much use beyond a basic tutorial. Although we have successfully demonstrated how to have the <code>ui</code> and <code>server</code> elements of a Shiny application talk to one another. We’ve captured dynamic inputs provided by the user and presented them back within the interface. And we have been able to pause the server execution until the user asks for a response. That’s not a bad start at all. But so much more than this can be achieved in Python Shiny. A good place to go for inspiration is the <a href="https://shinylive.io/py/examples/">Posit Example Gallery</a>. And if you’d like to understand a little more about how Python Shiny fits into the Python dashboarding toolkit, please check out my other blog on <a href="01-state-of-pyshiny.html">The Current State of Python Shiny</a>.</p>
<p>Happy dashboarding!</p>


</section>

 ]]></description>
  <category>Tutorial</category>
  <guid>https://thedatasavvycorner.netlify.app/blogs/02-getting-started-pyshiny.html</guid>
  <pubDate>Sun, 10 Sep 2023 06:29:08 GMT</pubDate>
  <media:content url="https://c0.wallpaperflare.com/preview/564/703/665/school-coding-software-development-education.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>The State of Python Shiny</title>
  <dc:creator>Rich Leyshon</dc:creator>
  <link>https://thedatasavvycorner.netlify.app/blogs/01-state-of-pyshiny.html</link>
  <description><![CDATA[ 



<section id="python-for-shiny-is-now-a-thing" class="level2">
<h2 class="anchored" data-anchor-id="python-for-shiny-is-now-a-thing">Python for Shiny is now a thing…</h2>
<figure class="center figure">
<img class="shaded_box figure-img" src="https://thedatasavvycorner.netlify.app/www/01-python-shiny/shiny-python.png" alt="AI-generated drawing of a shiny python." width="300px">
<figcaption class="figure-caption">
<a href="https://huggingface.co/spaces/dalle-mini/dalle-mini">DALL.E prompt</a>: python logo golden Sparkling glittery bokeh bright.
</figcaption>
</figure>
<p><a href="https://pypi.org/project/shiny/">Python Shiny</a> celebrates its first year anniversary on PyPi in July 2023. In case that needs further qualification, this is the Python-native implementation of the beloved RShiny dashboarding package that has been available in the R programming framework for over a decade now. Python Shiny has benefited from the experience that the developers at <a href="https://posit.co/">Posit</a> have gained in building its more mature, R-flavoured sibling.</p>
<p>Python Shiny has experienced what I would describe as an accelerated evolution and has the potential to become a front runner in production-grade applications. Mainly because it adheres to an evaluation strategy which is a bit ‘un-pythonic’. Shiny introduces dashboarding with lazy evaluation, meaning that elements of your code will only be evaluated when there is a need to do so. This is not always a great idea, particularly for standard scripting purposes. But it does make event-driven applications more efficient and scalable. More on <a href="https://posit.co/blog/why-shiny-for-python/">Posit’s take on the USP of Python Shiny here</a>.</p>
<p>Let’s consider the following example in Python:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># In Python</span></span>
<span id="cb1-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb1-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> failing_print(param_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Am I lazy?"</span>, param_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>absolutely_not):</span>
<span id="cb1-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(param_a)</span>
<span id="cb1-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">NameError</span>:</span>
<span id="cb1-6">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Python would not allow me to define this function."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Python would not allow me to define this function.</code></pre>
</div>
</div>
<p>Strict (also known as eager) evaluation in Python has triggered an error. I’ve had to catch the error above with the try/except clause in order to render this website. Even though <code>failing_print()</code> never calls on <code>param_b</code>, Python checks that the default value of that parameter exists on definition of the function.</p>
<p>Let us now compare the situation in R.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># In R</span></span>
<span id="cb3-2">passing_print <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">param_a =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Am I lazy?"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">param_b =</span> yes_you_are){</span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(param_a)</span>
<span id="cb3-4">}</span>
<span id="cb3-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Does `yes_you_are` exist? : "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exists</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yes_you_are"</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Does `yes_you_are` exist? :  FALSE"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">passing_print</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Am I lazy?"</code></pre>
</div>
</div>
<p>No exception was raised although the value <code>yes_you_are</code> has not been defined.</p>
<p>Lazy evaluation in Python Shiny minimises the work the application needs to undertake. Values in the app backend will only be re-evaluated as they are needed and contrasts with more pythonic approaches to dashboarding, such as the case with the <a href="https://streamlit.io/">streamlit package</a>.</p>
<p><br></p>
</section>
<section id="an-example-python-shiny-app." class="level2">
<h2 class="anchored" data-anchor-id="an-example-python-shiny-app.">An Example Python Shiny App.</h2>
<p>This application is written in Python and served with a free <a href="https://www.shinyapps.io/">shinyapps.io</a> account. I made the app to explore the quality of the spatial data available within <a href="https://www.openstreetmap.org/">OpenStreetMap</a> (OSM) data for certain urban areas. OSM is an open-source, community-maintained source of transport network data. The files also contain other spatial features, such as land use polygons. The quality of this data varies by location, as you may find in the app.</p>
<p>The application is pretty straightforward. It uses pandas to read in some pre-prepared data tables from a data folder. These files were prepared with a python package called <a href="https://pyrosm.readthedocs.io/en/latest/">pyrosm</a>. Pyrosm is a useful application for ingesting, assessing &amp; visualising OSM data. Selecting a city from the dropdowns then clicking the “Go” button will read the correct table from this little database, then using matplotlib, it visualises the selected spatial features. The app also presents some simple summary statistics in tables at the bottom of the page.</p>
<p>The preparation of the data files is not strictly necessary. You can serve an app and have it make external connections to data services to ingest data. In this instance, I chose to pre-process the data as it helped to improve the performance of the app. Even so, selecting London or Leeds can result in some wait times, so please be aware of this. Options for improving the performance further could include parallel processing, though that is not implemented here and is beyond the scope of this little example.</p>
<p>If you’d like to take a look at the application code and have a GitHub account, <a href="https://github.com/r-leyshon/pyrosm-experiments/blob/main/pyrosm-cities-app/app.py">you can access it here</a>.</p>
<div class="centerdiv">
<p><iframe src="https://richleysh84.shinyapps.io/pyrosm-cities-app/" title="Python Shiny OpenStreetMap Application"></iframe></p>
</div>
</section>
<section id="so-what-does-a-shiny-project-look-like" class="level2">
<h2 class="anchored" data-anchor-id="so-what-does-a-shiny-project-look-like">So What Does a Shiny Project Look Like?</h2>
<section id="organising-a-shiny-project." class="level3">
<h3 class="anchored" data-anchor-id="organising-a-shiny-project.">Organising a Shiny Project.</h3>
<p>Below is a directory tree diagram of the example Shiny application presented above. It shows the file structure in the various folders.</p>
<pre><code>.
├── 01-update-db.py
├── app.py
├── config
│&nbsp;&nbsp; └── 01-update-db.toml
├── data
│&nbsp;&nbsp; ├── leeds-landuse-2023-06-19.arrow
│&nbsp;&nbsp; ├── leeds-natural-2023-06-19.arrow
│&nbsp;&nbsp; ├── leeds-net-driving-2023-06-19.arrow
│&nbsp;&nbsp; ├── london-landuse-2023-06-19.arrow
│&nbsp;&nbsp; ├── london-natural-2023-06-19.arrow
│&nbsp;&nbsp; ├── london-net-driving-2023-06-19.arrow
│&nbsp;&nbsp; ├── marseille-landuse-2023-06-19.arrow
│&nbsp;&nbsp; ├── marseille-natural-2023-06-19.arrow
│&nbsp;&nbsp; ├── marseille-net-driving-2023-06-19.arrow
│&nbsp;&nbsp; ├── newport-landuse-2023-06-19.arrow
│&nbsp;&nbsp; ├── newport-natural-2023-06-19.arrow
│&nbsp;&nbsp; └── newport-net-driving-2023-06-19.arrow
├── requirements.txt
└── rsconnect-python
    └── pyrosm-cities-app.json</code></pre>
<p>The Shiny code that generates the application is in <code>app.py</code>. The data folder is where you put any data files you’d like to work with. Here I’m working with the .arrow format (<a href="https://datapythonista.me/blog/pandas-20-and-the-arrow-revolution-part-i">More on that here</a>). However, this folder could be used to store csvs, images, a GeoJSON database, whatever your application needs.</p>
<p>The file <code>01-update-db.py</code> and the contents of the <code>config</code> folder are related. The python script is used to update the database in the <code>data</code> folder. This part of the workflow can be quite time consuming, particularly extracting the transport network from dense areas such as Greater London. In order to improve the performance of the app, I chose to pre-prepare this data and limit the number of areas to my specific use-case. A previous iteration of this dashboard simply sent requests using the python <code>pyrosm</code> package to get data for any valid area name. The TOML file in the config folder simply stores some parameters used to configure <code>01-update-db.py</code>, such as named areas of interest, bounding box coordinates in order to crop the maps, that sort of thing. The <code>requirements.txt</code> file is super important. Not only will it help others to re-run your dashboard with the required package dependencies made explicit, this is also a file that hosting services such as <a href="https://www.shinyapps.io/">shinyapps.io</a> will use to recreate your development environment. More on that later.</p>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Ensuring that you have ‘pinned’ each package version in your requirements file will make publishing to a hosting service such as shinyapps.io a lot easier. It can be frustrating to push your locally working application up to a remote service, waiting for a potentially lengthy deployment routine to complete only to see that your app breaks as you’re working on a different version of <code>numpy</code> than the one available by default in the remote server.</p>
</div>
</div>
<p>Finally, the <code>rsconnect-python</code> directory is not something that would appear in your Shiny project until you deploy it to a remote-hosting service like shinyapps.io. It contains some metadata about your application which the remote service will use to set up your app properly.</p>
</section>
<section id="a-closer-look-at-app.py." class="level3">
<h3 class="anchored" data-anchor-id="a-closer-look-at-app.py.">A Closer Look at <code>app.py</code>.</h3>
<p>As stated earlier, this is where your app code goes. But before diving straight into some code, let’s try to get a feel for how the reactivity works.</p>
<div class="center_diagram">
<div class="cell">
<div class="cell-output-display">
<div>
<div>
<pre class="mermaid mermaid-js">flowchart TD
  user["User"]
  subgraph Application
  server["Server
  - Executes python code.
  - Processes data.
  - Translates outputs into HTML.
  "]
  ui["User Interface
  - Displays input widgets.
  - Displays rendered server outputs.
  - Can be adjusted with HTML &amp; CSS."]
  db[("Data")]
  end
  user --&gt;|Input Values| ui &lt;--&gt;|Dynamic Values| server
  db --&gt;|Read| server

linkStyle default stroke-width:1px,color:blue;

</pre>
</div>
</div>
</div>
</div>
</div>
<p><br></p>
<p>Each Shiny application comes in two distinct sections. The user interface is the frontend of the application, where a person engages with elements of a web page in order to control visuals, filter tables and so on. The web page translates Python code into HyperText Markup Language (HTML). HTML can be interpreted by a web browser in order to present the user with a structured web page. But in order to present an attractive web page, this HTML foundation needs to be styled. So Cascading Style Sheets (CSS) are used to add decoration to the foundation established by HTML.</p>
</section>
<section id="server-side-shenanigans." class="level3">
<h3 class="anchored" data-anchor-id="server-side-shenanigans.">Server-Side Shenanigans.</h3>
<p>Having an attractive web page that does not do something when you click around on it, enter your credit card details or click ‘decline’ on cookie consent notices would be rather pointless. This is where a web developer would use the language of the browser to work with data behind that pretty frontend. That language is JavaScript and it’s remarkably versatile and intimidating to many data-types.</p>
<p>So to make a functioning app, you need to learn 3 distinct languages. For this reason, packages such as Shiny, Dash and Streamlit have become very popular with analysts working within open-source programming frameworks such as Python and R. They allow the creation of applications while adhering to the syntax that an analyst would be more familiar with. Abstracting all that front-end know-how behind some very straightforward Python code allows the analyst to focus their efforts on the parts of their job that they excel in - gaining insight from data.</p>
<p>There would be little value in emulating the excellent Posit documentation on getting started with Python Shiny. To do that, I suggest <a href="https://shiny.posit.co/py/">using their docs</a>. In combination with the examples provided, a comprehensive introduction to Shiny is readily available. In the next section, I will focus on introducing a minimal application and then expanding on some of the more subtle considerations in the reactive flow of the backend. I’ll choose to focus on things where I’ve needed to learn by trial and error, or by searching the Stack Overflow boards through some of the inevitable roadblocks a person encounters when programming dashboards. I’ll throw in some common ‘gotchas’ for good measure.</p>
<p>The fastest way to get up and running with Python Shiny would be to play with the interactive code snippets that Posit makes available on their <a href="https://shiny.posit.co/py/docs/overview.html">overview documentation</a>. They host live Shiny sessions with the interactive app and backend code side-by-side. This is a great place to try things out and feel free to copy code from the examples I provide here.</p>
</section>
</section>
<section id="python-shiny-ecosystem." class="level2">
<h2 class="anchored" data-anchor-id="python-shiny-ecosystem.">Python Shiny Ecosystem.</h2>
<p>The success of Python Shiny will be down to the adoption &amp; support of the open-source community. This was easier to achieve 10 years ago in the R framework as Shiny had no real competitors at that time. This is not the case in the modern-day Python framework. Even with its particular USP in comparison to Streamlit &amp; Dash, programmers and analysts are creatures of habit. Considering the new player on the block as an alternative to what you already know requires a considerable argument. There will always be overhead in developing familiarity with a new solution’s particular quirks. That said, some of the community-developed packages in the more mature RShiny make building apps at scale very manageable. This final section of this blog takes a look at what Python Shiny bolt-ons we can already play with and a more wistful look over the programming divide at RShiny, considering some of the amazing packages that make me hopeful for the potential future of Python Shiny.</p>
<section id="what-we-already-have." class="level3">
<h3 class="anchored" data-anchor-id="what-we-already-have.">What We Already Have.</h3>
<section id="compatibility-with-jupyter-widgets." class="level4">
<h4 class="anchored" data-anchor-id="compatibility-with-jupyter-widgets.">Compatibility With <a href="https://ipywidgets.readthedocs.io/en/latest/">Jupyter Widgets</a>.</h4>
<p>Jupyter Widgets is a well-known add-in for Jupyter Notebooks, allowing for interactive widgets to be displayed and used in Notebooks. This allows for some interesting mini-dashboard opportunities to be served directly within the notebook itself, alongside the code. Having this compatibility from the start is great. While it does introduce a little duplication (Python Shiny has many of its own equivalent ui input widgets), the particular look and range of these widgets will be appealing to many seasoned Python devs. Many of the Jupyter Widget aficionados would have previously developed the capability in specifying callback logic, to be able to capture the user’s interactions with elements of the widget. For example, select a category in a table and use that active selection to filter a chart, the sort of thing that tends to be more prevalent in Business Insight software. Achieving this sort of interaction in Shiny definitely falls under ‘advanced use’. In R, the package <a href="https://github.com/rstudio/crosstalk">crosstalk</a> has significantly lowered the bar in achieving this. Hopefully a dedicated Python Shiny module or package makes its way to PyPi soon.</p>
</section>
<section id="deploying-an-app-with-rsconnect-python." class="level4">
<h4 class="anchored" data-anchor-id="deploying-an-app-with-rsconnect-python.">Deploying An App With <a href="https://github.com/rstudio/rsconnect-python/tree/master"><code>rsconnect-python</code></a>.</h4>
<p>This package is a useful command line interface (CLI) tool that allows you to build application manifests from your Shiny project and deploy them to services such as shinyapps.io. Once you’re ready to share an app with the wider community, check out the docs.</p>
</section>
<section id="modular-dashboards-shiny-modules." class="level4">
<h4 class="anchored" data-anchor-id="modular-dashboards-shiny-modules.">Modular Dashboards (Shiny Modules).</h4>
<p>This aspect of Shiny dashboarding is a bit meta. Essentially, when you (or your organisation) gets to a point that they have enough dashboards to be concerned with thinking about consistency and efficiency, take a read through the <a href="https://shiny.posit.co/py/docs/workflow-modules.html">Python Shiny Modules docs</a>. This is a way of reusing elements of your dashboard, much in the same way in which you reuse code by writing a function. Maybe your organisation has really committed to Shiny and has developed a beautifully-styled interface with house branding, or some interface component such as an Email field with some complex regular expression checking the validity of the Email address. There really is no need to copy-paste that code when you want to use it again. Package the element up as a Shiny Module and you can roll out this feature across multiple dashboards, secure in the knowledge that the quality of this module has already been agreed. Responsibility successfully deferred!</p>
<div class="callout callout-style-simple callout-note">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>Code reuse is the Holy Grail of Software Engineering — Douglas Crockford</p>
</div>
</div>
</div>
<p>The fact that Python Shiny devs have prioritised modular dashboarding so early is great. It illustrates a commitment to reproducibility that is rightly lauded within the open source community. Just to note that the ability to do this in RShiny took approximately 3 years. Python users are quite spoiled to be able to make use of this feature from the outset.</p>
</section>
</section>
<section id="what-i-really-want." class="level3">
<h3 class="anchored" data-anchor-id="what-i-really-want.">What I Really Want.</h3>
<p>While I feel generally positive about the future of Python Shiny, I do look across the gulf that exists between the Python and R frameworks with hungry eyes. Particularly at the rich, community-driven plethora of RShiny add-ins that make Shiny the undeniable dashboarding front-runner in that framework. Here is my wish-list of Python Shiny helper tools, ranked order (opinionated warning).</p>
<section id="reactlog." class="level4">
<h4 class="anchored" data-anchor-id="reactlog.">1. Reactlog.</h4>
<center>
<img src="https://thedatasavvycorner.netlify.app/blogs/https:/rstudio.github.io/reactlog/reference/figures/logo.svg" width="30%">
</center>
<p>There’s no 2 ways about it, debugging apps is a royal pain. One of my go to helpers in times of need is Posit’s own <a href="https://rstudio.github.io/reactlog/">reactlog package</a>. Reactlog is such an understated tool, yet it has been crucial to me in understanding what’s going on under the hood of my apps. So much so, that I now feel hopelessly exposed when writing apps in Python without it to lean on.</p>
<center>
<img class="shaded_box" src="https://thedatasavvycorner.netlify.app/blogs/http:/rstudio.github.io/reactlog/readme-images/pythagoras.gif" width="100%">
</center>
<p>This package allows you to launch an app, showing you useful insights about the performance and reactive flow of your app. It’s an app inception. It can be used in a variety of modes, you can record yourself clicking away on your app and then pause the interface to inspect variable statuses. Reactlog visualises the dependency graph of variables in your server and really is an indispensable debugging tool.</p>
</section>
<section id="shinytest." class="level4">
<h4 class="anchored" data-anchor-id="shinytest.">2. Shinytest.</h4>
<p>Unit tests for your RShiny app anyone? Authored by the ubiquitous Hadley Wickham, <a href="https://github.com/rstudio/shinytest/">shinytest</a> allows you to make assertions about the behaviour of your application. In combination with the ability to design Shiny modules, this is a key piece of the RShiny toolkit allowing for the design of stable, production-ready Shiny components.</p>
</section>
<section id="dt-data-tables." class="level4">
<h4 class="anchored" data-anchor-id="dt-data-tables.">3. DT Data Tables.</h4>
<p>Another one of Posit’s own packages, <a href="https://github.com/rstudio/DT">DT</a> helps to create beautiful, customisable and interactive data tables for the presentation of tables. Not just for RShiny applications, DT is also widely used in Rmarkdown reports. A dedicated Python Shiny solution would be most welcome.</p>
</section>
<section id="shinyhelper." class="level4">
<h4 class="anchored" data-anchor-id="shinyhelper.">4. Shinyhelper.</h4>
<p>The <a href="https://github.com/cwthom/shinyhelper">shinyhelper</a> package developed by Chris Mason-Thom is an excellent solution for those involved applications that need a little more guidance for the user.</p>
<center>
<img src="https://thedatasavvycorner.netlify.app/blogs/https:/github.com/cwthom/shinyhelper/raw/master/man/figures/logo.png" width="30%">
</center>
<p>Shinyhelper allows the developer to include markdown files with extensive instructions, images and gif animations of how to use your application. These documents will be hidden from the screen until the user chooses to click on the help icons that shinyhelper provides. These help icons can be easily styled and positioned around any element within your ui. Once clicked, they will launch modal windows with your beautifully formatted instructions, allowing a wealth of guidance to be included within your app without causing excessive clutter.</p>
<p>Try clicking through the different helper symbols in the demo RShiny application below.</p>
<div class="centerdiv">
<p><iframe src="https://cwthom94.shinyapps.io/shinyhelper-demo/" title="Example shinyhelper demo application"></iframe></p>
</div>
</section>
</section>
</section>
<section id="in-review." class="level2">
<h2 class="anchored" data-anchor-id="in-review.">In Review.</h2>
<p>Python Shiny is a promising addition to the Python programming framework. It has a USP, and Posit have the know-how to apply the learning from their past development of RShiny to help ensure it has a bright future. It is also worth noting that Posit have recently put a lot of effort into developing <a href="https://quarto.org/">Quarto</a>, which you may think of as like Rmarkdown but with native Python, R and Julia support. The reason why this is important is that often, interactive widgets and solutions designed for use in notebooks or markdown documents take little refactoring to get them running in Shiny apps. Or conversely, there are ways to <a href="https://shiny.posit.co/r/articles/build/rmarkdown/">convert rmarkdown docs into Shiny</a> or <a href="https://pkgs.rstudio.com/flexdashboard/">Shiny-like applications</a>. Understanding the synergies between these tools and how they have influenced the evolution of RShiny may give some insight into how we may expect Python Shiny &amp; Quarto to develop in the years ahead.</p>
<p>The Python community is well-served by dashboarding solutions which will affect its wider adoption. If you are newer to dashboarding, or if you are looking for a solution that perhaps scales better than some of the other options available in the Python framework, then consider Python Shiny. It’s already pretty great and will only get better as the community warms to this new tool in the Python toolkit.</p>


</section>

 ]]></description>
  <category>Explanation</category>
  <guid>https://thedatasavvycorner.netlify.app/blogs/01-state-of-pyshiny.html</guid>
  <pubDate>Sun, 10 Sep 2023 06:28:54 GMT</pubDate>
  <media:content url="https://thedatasavvycorner.netlify.app/./www/01-python-shiny/shiny-python.png" medium="image" type="image/png" height="142" width="144"/>
</item>
</channel>
</rss>
