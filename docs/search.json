[
  {
    "objectID": "python-shiny.html",
    "href": "python-shiny.html",
    "title": "Python for Shiny",
    "section": "",
    "text": "DALL.E prompt: python logo golden Sparkling glittery bokeh bright.\n\n\nPython Shiny celebrates its first year anniversary on PyPi in July 2023. In case that needs further qualification, this is the Python-native implementation of the beloved RShiny dashboarding package that has been available in the R programming framework for over a decade now. Python Shiny has benefited from the experience that the developers at Posit have gained in building its more mature, R-flavoured sibling.\nPython Shiny has experienced what I would describe as an accelerated evolution and has the potential to become a frontrunner in Pythonic, production-grade applications. Mainly because it adheres to an evaluation strategy which is a bit un-pythonic. Shiny introduces dashboarding with lazy evaluation, meaning that elements of your code will only be evaluated when there is a need to do so. This is not always a great idea, particularly for procedural or object-oriented programming. But it does make event-drive applications more efficient and scalable. More on Posit’s take on the USP of Python Shiny here."
  },
  {
    "objectID": "python-shiny.html#python-for-shiny-is-now-a-thing",
    "href": "python-shiny.html#python-for-shiny-is-now-a-thing",
    "title": "Python for Shiny",
    "section": "",
    "text": "DALL.E prompt: python logo golden Sparkling glittery bokeh bright.\n\n\nPython Shiny celebrates its first year anniversary on PyPi in July 2023. In case that needs further qualification, this is the Python-native implementation of the beloved RShiny dashboarding package that has been available in the R programming framework for over a decade now. Python Shiny has benefited from the experience that the developers at Posit have gained in building its more mature, R-flavoured sibling.\nPython Shiny has experienced what I would describe as an accelerated evolution and has the potential to become a frontrunner in Pythonic, production-grade applications. Mainly because it adheres to an evaluation strategy which is a bit un-pythonic. Shiny introduces dashboarding with lazy evaluation, meaning that elements of your code will only be evaluated when there is a need to do so. This is not always a great idea, particularly for procedural or object-oriented programming. But it does make event-drive applications more efficient and scalable. More on Posit’s take on the USP of Python Shiny here."
  },
  {
    "objectID": "python-shiny.html#an-example-python-shiny-app",
    "href": "python-shiny.html#an-example-python-shiny-app",
    "title": "Python for Shiny",
    "section": "An Example Python Shiny App",
    "text": "An Example Python Shiny App\nThis application is written in Python and served with a free shinyapps.io account. I made the app to explore the quality of the spatial data available within Open Street Map (OSM) data for certain urban areas. Open Street Map is an open-source, community-maintained source of transport network data. The files also contain other spatial features, such as landuse polygons. The quality of this data varies by location, as you may find in the app.\nThe application is pretty straight forward. It uses pandas to read in some pre-prepared data tables from a data folder. These files were prepared with a python package called pyrosm. Pyrosm is a useful application for ingesting, assessing & visualising OSM data. Selecting a city from the dropdowns then clicking the “Go” button will read the correct table from this little database, then using matplotlib, it visualises the selected spatial features. The app also presents some simple summary statistics in tables at the bottom of the page.\nThe preparation of the data files is not strictly necessary. You can serve an app and have it make external connections to data services to ingest data. In this instance, I chose to pre-process the data as it helped to improve the performance of the app. Even so, selecting London or Leeds can result in some wait times, so please be aware of this. Options for improving the performance further could include parallel processing, though that is not implemented here and is beyond the scope of this little example."
  },
  {
    "objectID": "python-shiny.html#getting-started-with-python-shiny",
    "href": "python-shiny.html#getting-started-with-python-shiny",
    "title": "Python for Shiny",
    "section": "Getting Started with Python Shiny",
    "text": "Getting Started with Python Shiny\nGetting started\n\nFrontend\n\n\nBackend"
  },
  {
    "objectID": "python-shiny.html#a-years-progress",
    "href": "python-shiny.html#a-years-progress",
    "title": "Python for Shiny",
    "section": "A Year’s Progress",
    "text": "A Year’s Progress\n\nReactivity\n\n\nModular Dashboard"
  },
  {
    "objectID": "python-shiny.html#the-shiny-ecosystem",
    "href": "python-shiny.html#the-shiny-ecosystem",
    "title": "Python for Shiny",
    "section": "The Shiny Ecosystem",
    "text": "The Shiny Ecosystem\nA nostalgic look at RShiny ecosystem.\n\nPython Shiny Add-ins\n\n\nPython Shiny Wishlist\n\n\nShinyhelper\n\nShinytest\n\n\nDT tables\n\n\nGolem\n\n\nReactlog"
  },
  {
    "objectID": "python-shiny.html#in-review",
    "href": "python-shiny.html#in-review",
    "title": "Python for Shiny",
    "section": "In Review",
    "text": "In Review\nFinal thoughts & sign off"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Another Nerd Blog.",
    "section": "",
    "text": "A place to store (micro) blogs about programming concepts, software development and data science. Generally things that future me will be thankful that I’ve recorded these things somewhere."
  },
  {
    "objectID": "index.html#intro",
    "href": "index.html#intro",
    "title": "Another Nerd Blog.",
    "section": "",
    "text": "A place to store (micro) blogs about programming concepts, software development and data science. Generally things that future me will be thankful that I’ve recorded these things somewhere."
  },
  {
    "objectID": "index.html#about-me",
    "href": "index.html#about-me",
    "title": "Another Nerd Blog.",
    "section": "About Me",
    "text": "About Me\npending"
  },
  {
    "objectID": "index.html#blogs",
    "href": "index.html#blogs",
    "title": "Another Nerd Blog.",
    "section": "Blogs",
    "text": "Blogs\nShiny for Python is now a thing…"
  }
]