[
  {
    "objectID": "01-python-shiny/python-shiny.html",
    "href": "01-python-shiny/python-shiny.html",
    "title": "Python for Shiny",
    "section": "",
    "text": "DALL.E prompt: python logo golden Sparkling glittery bokeh bright.\n\n\nPython Shiny celebrates its first year anniversary on PyPi in July 2023. In case that needs further qualification, this is the Python-native implementation of the beloved RShiny dashboarding package that has been available in the R programming framework for over a decade now. Python Shiny has benefited from the experience that the developers at Posit have gained in building its more mature, R-flavoured sibling.\nPython Shiny has experienced what I would describe as an accelerated evolution and has the potential to become a front runner in production-grade applications. Mainly because it adheres to an evaluation strategy which is a bit ‘un-pythonic’. Shiny introduces dashboarding with lazy evaluation, meaning that elements of your code will only be evaluated when there is a need to do so. This is not always a great idea, particularly for standard scripting purposes. But it does make event-drive applications more efficient and scalable. More on Posit’s take on the USP of Python Shiny here.\nLet’s consider the following example in Python:\n\n# In Python\ntry:\n  def failing_print(param_a=\"Am I lazy?\", param_b=absolutely_not):\n    print(param_a)\nexcept NameError:\n  print(\"Python woud not allow me to define this function.\")\n\nPython woud not allow me to define this function.\n\n\nStrict (also known as eager) evaluation in Python has triggered an error. I’ve had to catch the error above with the try/except clause in order to render this website. Even though failing_print() never calls on param_b, Python checks that the default value of that parameter exists on definition of the function.\nLet us now compare to the situation in R.\n\n# In R\npassing_print &lt;- function(param_a = \"Am I lazy?\", param_b = yes_you_are){\n  print(param_a)\n}\nprint(paste(\"Does `yes_you_are` exist? : \", exists(\"yes_you_are\")))\n\n[1] \"Does `yes_you_are` exist? :  FALSE\"\n\npassing_print()\n\n[1] \"Am I lazy?\"\n\n\nNo exception was raised although the value yes_you_are has not been defined.\nLazy evaluation in Python Shiny minimises the work the application needs to undertake. Values in the app backend will only be re-evaluated as they are needed and contrasts with more pythonic approaches to dashboarding, such as the case with the streamlit package."
  },
  {
    "objectID": "01-python-shiny/python-shiny.html#python-for-shiny-is-now-a-thing",
    "href": "01-python-shiny/python-shiny.html#python-for-shiny-is-now-a-thing",
    "title": "Python for Shiny",
    "section": "",
    "text": "DALL.E prompt: python logo golden Sparkling glittery bokeh bright.\n\n\nPython Shiny celebrates its first year anniversary on PyPi in July 2023. In case that needs further qualification, this is the Python-native implementation of the beloved RShiny dashboarding package that has been available in the R programming framework for over a decade now. Python Shiny has benefited from the experience that the developers at Posit have gained in building its more mature, R-flavoured sibling.\nPython Shiny has experienced what I would describe as an accelerated evolution and has the potential to become a front runner in production-grade applications. Mainly because it adheres to an evaluation strategy which is a bit ‘un-pythonic’. Shiny introduces dashboarding with lazy evaluation, meaning that elements of your code will only be evaluated when there is a need to do so. This is not always a great idea, particularly for standard scripting purposes. But it does make event-drive applications more efficient and scalable. More on Posit’s take on the USP of Python Shiny here.\nLet’s consider the following example in Python:\n\n# In Python\ntry:\n  def failing_print(param_a=\"Am I lazy?\", param_b=absolutely_not):\n    print(param_a)\nexcept NameError:\n  print(\"Python woud not allow me to define this function.\")\n\nPython woud not allow me to define this function.\n\n\nStrict (also known as eager) evaluation in Python has triggered an error. I’ve had to catch the error above with the try/except clause in order to render this website. Even though failing_print() never calls on param_b, Python checks that the default value of that parameter exists on definition of the function.\nLet us now compare to the situation in R.\n\n# In R\npassing_print &lt;- function(param_a = \"Am I lazy?\", param_b = yes_you_are){\n  print(param_a)\n}\nprint(paste(\"Does `yes_you_are` exist? : \", exists(\"yes_you_are\")))\n\n[1] \"Does `yes_you_are` exist? :  FALSE\"\n\npassing_print()\n\n[1] \"Am I lazy?\"\n\n\nNo exception was raised although the value yes_you_are has not been defined.\nLazy evaluation in Python Shiny minimises the work the application needs to undertake. Values in the app backend will only be re-evaluated as they are needed and contrasts with more pythonic approaches to dashboarding, such as the case with the streamlit package."
  },
  {
    "objectID": "01-python-shiny/python-shiny.html#an-example-python-shiny-app",
    "href": "01-python-shiny/python-shiny.html#an-example-python-shiny-app",
    "title": "Python for Shiny",
    "section": "An Example Python Shiny App",
    "text": "An Example Python Shiny App\nThis application is written in Python and served with a free shinyapps.io account. I made the app to explore the quality of the spatial data available within Open Street Map (OSM) data for certain urban areas. Open Street Map is an open-source, community-maintained source of transport network data. The files also contain other spatial features, such as landuse polygons. The quality of this data varies by location, as you may find in the app.\nThe application is pretty straight forward. It uses pandas to read in some pre-prepared data tables from a data folder. These files were prepared with a python package called pyrosm. Pyrosm is a useful application for ingesting, assessing & visualising OSM data. Selecting a city from the dropdowns then clicking the “Go” button will read the correct table from this little database, then using matplotlib, it visualises the selected spatial features. The app also presents some simple summary statistics in tables at the bottom of the page.\nThe preparation of the data files is not strictly necessary. You can serve an app and have it make external connections to data services to ingest data. In this instance, I chose to pre-process the data as it helped to improve the performance of the app. Even so, selecting London or Leeds can result in some wait times, so please be aware of this. Options for improving the performance further could include parallel processing, though that is not implemented here and is beyond the scope of this little example.\nIf you’d like to take a look at the application code and have a GitHub account, you can access it here."
  },
  {
    "objectID": "01-python-shiny/python-shiny.html#so-what-does-a-shiny-project-look-like",
    "href": "01-python-shiny/python-shiny.html#so-what-does-a-shiny-project-look-like",
    "title": "Python for Shiny",
    "section": "So what does a Shiny project look like?",
    "text": "So what does a Shiny project look like?\n\n\n\n\n\n%%linkStyle default stroke: blue\n\nflowchart TD\n  user[\"User\"]\n  subgraph Application\n  server[\"Server\n  - Executes python code.\n  - Processes data.\n  - Translates outputs into HTML.\n  \"]\n  ui[\"User Interface\n  - Displays input widgets.\n  - Displays rendered server outputs.\n  - Can be adjusted with HTML & CSS.\"]\n  db[(\"Data\")]\n  end\n  user --&gt;|Input Values| ui &lt;--&gt;|Dynamic Values| server\n  db --&gt;|Read| server\n\nlinkStyle default stroke-width:1px,color:blue;\n\n\n\n\n\n\n\n\nEach Shiny application comes in two distinct sections. The user interface is the frontend of the application, where a person engages with elements of a web page in order to control visuals, filter tables and so on. The web page translates Python code into HyperText Markup Language (HTML). HTML can be interpreted by a web browser in order to present the user with a structured web page. But in order to present an attractive webpage, this HTML foundation needs to be styled. So Cascading Style Sheets (CSS) are used to add decoration to the foundation established by HTML.\nHaving an attractive webpage that does not do something when you click around on it, enter your credit card details or click ‘decline’ on cookie consent notices would be rather pointless. This is where a web developer would use the language of the browser to work with data hehind that pretty frontend. That language is JavaScript and it’s remarkably versatile and intimidating to many data-types.\nSo to make a functioning app, you need to learn 3 distinct languages. For this reason, packages such as Shiny, Dash and Streamlit have become very popular with analysts working within open-source programming frameworks such as Python and R. They allow the creation of applications while adhering to the syntax that an analyst would be more familiar with. Abstracting all that front-end know-how behind some very straight-forward Python code allows the analyst to focus their efforts on the parts of their job that they excel in - gaining insight from data.\nThere would be little value in emulating the excellent Posit documentation on getting started with Python Shiny. To do that, I suggest using their docs. In combination with the examples provided, a comprehensive introduction to Shiny is readily available. In the next section, I will focus on introducing a minimal application and then expanding on some of the more subtle considerations in the reactive flow of the backend. I’ll choose to focus on things where I’ve needed to learn by trial and error, or by searching the Stack Overflow boards through some of the inevitable roadblocks a person encounters when programming dashboards. I’ll throw in some common ‘gotchas’ for good measure.\nThe fastest way to get up and running with Python Shiny would be to play with the interactive code snippets that Posit make available on their overview documentation. They host live Shiny sessions with the interactive app and backend code side-by-side. This is a great place to try things out and feel free to copy code from the examples I provide here.\n\nLet’s Build a Basic App\nBelow is a really minimal app that doesn’t do very much at all. Try pasting it into the Posit webpage and clicking the play button in the corner of the page to re-run the code.\n\n#1 Import modules to help us build our app\nfrom shiny import ui, App\n\n#^putting things above the app means they can be shared between your ui and server\n\napp_ui = ui.page_fluid(\n  #2 all of the elements you wish to show your user should go within the ui\n    ui.input_text(\n        id=\"name_entry\",\n        label=\"Please enter your name\",\n        placeholder=\"Your name here\"\n        )\n)\n\ndef server(input, output, session):\n  #3 this is where your app logic should go. So far, not much...\n    return None\n  \n# Finally - this bit packages up our ui and server. Super important - it must be named `app`.\napp = App(app_ui, server)\n\nYou’ll see that the code defines an app_ui object, which is a shiny ui instance. Within that ui.page_fluid() function, we can specify all the elements of the app that we would like to present to our users.\n\n\n\n\n\n\nOn Users…\n\n\n\nThere are only two industries that call their customers “users”: illegal drugs and software – Edward Tufte\n\n\nSo far, only one simple ui element has been defined. The humble text input ui.input_text() which allows our users to place their own text into a text field. Notice that in Python, all the inputs begin with input.... There’s ui.input_text() as we’ve seen, but there’s lots more. ui.input_date(), ui.input_file() and ui.input_slider to name a few. This consistent syntax approach is a subtle improvement over RShiny and makes it so much easier to work with the vast array of widgets without having to remember them all. If you’re working in a modern editor such as Visual Studio Code, simply typing ui.input will remind you of all the options available to you. For those not working in a nice GUI like VSCode, a shiny cheatsheet may be useful, though note that at the time of writing I could only find R-flavoured ones…\nAll ui input elements start with the same 2 arguments, id and label:\n\nid: The internal name of the input. What does that mean? Call it what you like. Whatever you choose, be aware that when you want to use the values from the text input to do something in the server, it’s this name that you will need to reference.\nlabel: A short piece of text that prompts your user to do something. This will be displayed in your ui above the input element.\n\nUnfortunately, so far our app doesn’t actually do much. Typing into the empty text field yields no result. That’s because right now, our server function simply returns None. Let’s resolve this.\n\n#1 update the import statement to include `render` module\nfrom shiny import ui, App, render\n\napp_ui = ui.page_fluid(\n    ui.input_text(\n        id=\"name_entry\",\n        label=\"Please enter your name\",\n        placeholder=\"Your name here\"\n        ),\n    #2 Include a UI output element. This will show the calculations\n    # made in the server back to the user.\n    ui.output_text_verbatim(\"greeting\"),\n)\n\ndef server(input, output, session):\n    #3 Update the server with a function that handles the text response.\n    @output # use the output decorator to mark this function\n    @render.text # also need to ensure we use the correct render decorator\n    def greeting():\n        \"\"\"\n        This function will take the output of the ui.input_text() element,\n        format the string in a polite sentence and format it as an HTML\n        output for the UI to show.\n        \"\"\"\n        return f\"Hi {input.name_entry()}, welcome to Python Shiny.\"\n\napp = App(app_ui, server)\n\nThere’s quite a lot going on in the above code chunk. Let’s start with the decorators @output & @render.text:\n\n@output: Any function marked with this decorator will have its returned value made available to the user interface. Notice that in the line ui.output_text_verbatim(\"greeting\") we are able to call on the values of the server’s greeting() function that we marked as an @output.\n@render.text: This tells Shiny what type of output to handle. Is it text, a chart (@render.plot) or something more fancy, like dynamically rendered ui (@render.ui). These output types all have their corresponding output functions to use in the ui. Here we called ui.output_text_verbatim().\nCalling the wrong ui-side function may not result in an error, but can have unexpected results, such as your text disappearing from your app. Keep an eye out for that if things aren’t working - are you using the correct combination of render in the server with output_... in the ui?\n\nDid you notice anything off-putting about the above code? Yes, too many comments but please indulge me. Functions in the server and ui are passing values back and forth. That can be a bit overwhelming to get your head around when your new to what’s known as ‘event-driven programming’. All that means is that the program needs to respond to some action taken by the user. The syntax in which you reference the functions are inconsistent. Lets take a closer look:\nIf I mark some function make_plot() in the server as an @output and then wish to call on its value within the ui, I need to use ui.output_plot(\"make_plot\"). Notice the lack of brackets following the function name \"make_plot\". Getting this wrong will result in a ValueError. Forgetting to wrap the function reference in a string will result in a NameError.\nNow in the other direction, perhaps we have a numeric input passing integer values from the user to the server. We’ll give the slider widget the id=\"int_slider\". Now when we want to use the value of this slider on the server-side, we use a different syntax:\ndef print_selection():\n    n = int_slider()\n    return f\"You chose {n}!\"\nNotice this time, we include brackets after our call to the widget id: n = int_slider(). Weird, right? Getting this wrong may result in unexpected behaviours. Keep an eye out for this. Also, wrapping server id references in speech marks results in unexpected behaviours, but not necessarily errors.\nIf I haven’t lost you yet, well done! Debugging applications can be a very frustrating process - part intuition earned from hours of shiny debugging, part Stack Overflow and part coping mechanisms. I’ll cover some of those in the Tips section.\nSo there you have it. A very basic application that can be used to print out some simple messages to your user. This is of course a trivial app in order to keep things basic for the purposes of this blog. If you’d like to investigate what’s possible with Shiny, I’d suggest taking a peek through the Posit docs examples and the Python Shiny gallery. In the next section I’ll go over some tips that may help with common pitfalls I’ve encountered while working in Shiny.\n\n\nTips\nMust be app.py.\nHeader accessibility adjustment.\nDebugging statement."
  },
  {
    "objectID": "01-python-shiny/python-shiny.html#a-years-progress",
    "href": "01-python-shiny/python-shiny.html#a-years-progress",
    "title": "Python for Shiny",
    "section": "A Year’s Progress",
    "text": "A Year’s Progress\n\nReactivity\n\n\nModular Dashboard"
  },
  {
    "objectID": "01-python-shiny/python-shiny.html#the-shiny-ecosystem",
    "href": "01-python-shiny/python-shiny.html#the-shiny-ecosystem",
    "title": "Python for Shiny",
    "section": "The Shiny Ecosystem",
    "text": "The Shiny Ecosystem\nA nostalgic look at RShiny ecosystem.\n\nPython Shiny Add-ins\n\n\nPython Shiny Wishlist\n\n\nShinyhelper\n\nShinytest\n\n\nDT tables\n\n\nGolem\n\n\nReactlog"
  },
  {
    "objectID": "01-python-shiny/python-shiny.html#in-review",
    "href": "01-python-shiny/python-shiny.html#in-review",
    "title": "Python for Shiny",
    "section": "In Review",
    "text": "In Review\nFinal thoughts & sign off"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Another Nerd Blog.",
    "section": "",
    "text": "A place to store (micro) blogs about programming concepts, software development and data science. Generally things that future me will be thankful that I’ve recorded these things somewhere."
  },
  {
    "objectID": "index.html#intro",
    "href": "index.html#intro",
    "title": "Another Nerd Blog.",
    "section": "",
    "text": "A place to store (micro) blogs about programming concepts, software development and data science. Generally things that future me will be thankful that I’ve recorded these things somewhere."
  },
  {
    "objectID": "index.html#about-me",
    "href": "index.html#about-me",
    "title": "Another Nerd Blog.",
    "section": "About Me",
    "text": "About Me\npending"
  },
  {
    "objectID": "index.html#blogs",
    "href": "index.html#blogs",
    "title": "Another Nerd Blog.",
    "section": "Blogs",
    "text": "Blogs\nShiny for Python is now a thing…"
  }
]