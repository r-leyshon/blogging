[
  {
    "objectID": "python-shiny.html",
    "href": "python-shiny.html",
    "title": "Python for Shiny",
    "section": "",
    "text": "Python Shiny celebrates its first year anniversary on PyPi in July 2023. In case that needs further qualification, this is the Python-native implementation of the beloved RShiny dashboarding package that has been available in the R programming framework for over a decade now. Python Shiny has benefited from the experience that the developers at Posit have developed in building its more mature, R-flavoured sibling.\nPython Shiny has experienced what I would describe as an accelerated evolution and has the potential to become a frontrunner in Pythonic, production-grade applications. Mainly because it adheres to an evaluation strategy which is a bit un-pythonic. Shiny introduces dashboarding with lazy evaluation, meaning that elements of your code will only be evaluated when there is a need to do so. This is not always a great idea, particularly for procedural or object-oriented programming. But it does make event-drive applications more efficient and scalable. More on Posit’s take on the USP of Python Shiny here."
  },
  {
    "objectID": "python-shiny.html#python-for-shiny-is-now-a-thing",
    "href": "python-shiny.html#python-for-shiny-is-now-a-thing",
    "title": "Python for Shiny",
    "section": "",
    "text": "Python Shiny celebrates its first year anniversary on PyPi in July 2023. In case that needs further qualification, this is the Python-native implementation of the beloved RShiny dashboarding package that has been available in the R programming framework for over a decade now. Python Shiny has benefited from the experience that the developers at Posit have developed in building its more mature, R-flavoured sibling.\nPython Shiny has experienced what I would describe as an accelerated evolution and has the potential to become a frontrunner in Pythonic, production-grade applications. Mainly because it adheres to an evaluation strategy which is a bit un-pythonic. Shiny introduces dashboarding with lazy evaluation, meaning that elements of your code will only be evaluated when there is a need to do so. This is not always a great idea, particularly for procedural or object-oriented programming. But it does make event-drive applications more efficient and scalable. More on Posit’s take on the USP of Python Shiny here."
  },
  {
    "objectID": "python-shiny.html#example-python-shiny-application",
    "href": "python-shiny.html#example-python-shiny-application",
    "title": "Python for Shiny",
    "section": "Example Python Shiny Application",
    "text": "Example Python Shiny Application\nThis application is written in Python and served with a free shinyapps.io license."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Another Nerd Blog.",
    "section": "",
    "text": "A place to store (micro) blogs about programming concepts, software development and data science. Generally things that future me will be thankful that I’ve recorded these things somewhere."
  },
  {
    "objectID": "index.html#intro",
    "href": "index.html#intro",
    "title": "Another Nerd Blog.",
    "section": "",
    "text": "A place to store (micro) blogs about programming concepts, software development and data science. Generally things that future me will be thankful that I’ve recorded these things somewhere."
  },
  {
    "objectID": "index.html#about-me",
    "href": "index.html#about-me",
    "title": "Another Nerd Blog.",
    "section": "About Me",
    "text": "About Me\npending"
  },
  {
    "objectID": "index.html#blogs",
    "href": "index.html#blogs",
    "title": "Another Nerd Blog.",
    "section": "Blogs",
    "text": "Blogs\nShiny for Python is now a thing…"
  }
]