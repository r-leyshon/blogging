---
title: "Getting Pydeck to Play Ball with GeoPandas."
author: "Rich Leyshon"
date: "February 18 2024"
description: "Building Pydeck Maps from GeoPandas GeoDataFrames."
categories:
    - How To
    - Geospatial
    - pydeck
    - geopandas
image: "https://images.pixexid.com/a-lake-with-mountains-in-the-background-0szt8nia.jpeg?h=700&amp;q=70"
image-alt: "A lake with mountains in the background by [Prompart](https://pixexid.com/profile/@prompart)"
toc: true
jupyter: 
  kernelspec:
    name: "conda-env-cycling-env-py"
    language: "python"
    display_name: "blog-cycling-env"
---

<figure class=center>
  <img class="shaded_box" width=400px src="https://images.pixexid.com/a-lake-with-mountains-in-the-background-0szt8nia.jpeg?h=700&amp;q=70"></img>
  <figcaption style="text-align:center;">Creative commons license by [Prompart](https://pixexid.com/profile/@prompart)</figcaption>
</figure>

## Introduction

Pydeck is a python client for pydeck.gl, a powerful geospatial visualisation
library. It's a relatively new library and integrating it with the existing
python geospatial ecosystem is currently a little tricky. This article
demonstrates how to build pydeck ScatterplotLayer and GeoJsonLayer from
geopandas GeoDataFrames.

- <a href="https://deckgl.readthedocs.io/en/latest/" target="_blank">Pydeck documentation</a>
- <a href="https://deck.gl/#/" target="_blank">Deck.gl documentation</a>

:::{.callout collapse="true"}

### A Note on the Purpose

The content of this article was written using pydeck 0.8.0. Future releases may
alter the package behaviour.
:::

### Intended Audience

Python practitioners familiar with virtual environments, `requests` and
geospatial analysis with `geopandas`.

### The Scenario

You have a geopandas GeoDataFrame with point or polygon geometries. You are
attempting to build a pydeck visualisation but end up with empty basemap tiles.

### What You'll Need:

- [ ] Preferred python environment manager (eg `conda`)
- [ ] Python package manager (eg `pip`)
- [ ] `requirements.txt`:

```{.python filename=requirements.txt eval=false}
geopandas
pandas
pydeck
requests

```
## Prepare Environment

1. Create a virtual environment.
2. Install the required dependencies.
3. Activate the virtual environment.
4. Create a python script and import the dependencies.

```{python}
import geopandas as gpd
import pydeck as pdk
import requests
```

## Build a `ScatterplotLayer`

### Ingest Data

For the point data, I will ingest all Welsh lower super output area 2021 population-weighted centroids from [ONS Open Geography Portal](https://geoportal.statistics.gov.uk/datasets/79fa1c80981b4e4eb218bbce1afc304b_0/explore).

For more on working with ONS Open Geography Portal, see [Getting Data from ONS Open Geography Portal](/./blogs/06-working-with-ONS-open-geo-portal.qmd).

```{python}
ENDPOINT = "https://services1.arcgis.com/ESMARspQHYMw9BZ9/arcgis/rest/services/LLSOA_Dec_2021_PWC_for_England_and_Wales_2022/FeatureServer/0/query"
PARAMS = {
    "where": "LSOA21CD like 'W%'",
    "f": "geoJSON", 
    "outFields": "*",
    "outSR": 4326, # CRS that you want
}
resp = requests.get(ENDPOINT, params=PARAMS)
if resp.ok:
    content = resp.json()
else:
    raise requests.RequestException(f"HTTP {resp.status_code} : {resp.reason}")

centroids = gpd.GeoDataFrame.from_features(
    features=content["features"], crs=content["crs"]["properties"]["name"])
centroids.head()
```

The geometry column is not in a format that pydeck will accept. Adding a column
with a list of long,lat values for each coordinate will do the trick.

```{python}
centroids["pydeck_geometry"] = [[c.x, c.y] for c in centroids["geometry"]]
centroids.head()
```

### Pydeck Visualisation

With the correct geometry format, the scatterplot is trivial.

```{python}
layer = pdk.Layer(
    "ScatterplotLayer",
    centroids,
    pickable=True,
    stroked=True,
    filled=True,
    line_width_min_pixels=1,
    get_position="pydeck_geometry",
    get_fill_color=[255, 140, 0],
    get_line_color=[255, 140, 0],
    radius_min_pixels=3,
    opacity=0.1,
)
# Set the viewport location
view_state = pdk.ViewState(
    longitude=-3.64,
    latitude=52.42,
    zoom=6.5,
    max_zoom=15,
    pitch=0,
    bearing=0,
)
tooltip = {
    "text": "LSOA21CD: {LSOA21CD}"
}
# Render
r = pdk.Deck(
    layers=[layer], initial_view_state=view_state, tooltip=tooltip
)
r
```

## Build a `GeoJsonLayer`


### Tips

* 

## Conclusion

This article has walked the reader through . For more help with ...

<p id=fin><i>fin!</i></p>