---
title: "Working with ONS Open Geography Portal"
author: "Rich Leyshon"
date: last-modified
description: "How to ingest data using Python requests & ArcGIS REST API."
categories:         # delete categories as appropriate. using https://diataxis.fr/ documentation definitions.
    - Tutorial
    - ONS Open Geography Portal
    - REST API
    - Web data

image: https://upload.wikimedia.org/wikipedia/commons/thumb/c/c9/Great_Britain-United_Kingdom_Topographic_Map.jpg/569px-Great_Britain-United_Kingdom_Topographic_Map.jpg?20220903003608
image-alt: "Great Britain-United Kingdom Topographic Map"
toc: false # iframe overlaps 
---
<figure class=center>
  <img class="shaded_box" width=400px src="https://upload.wikimedia.org/wikipedia/commons/thumb/c/c9/Great_Britain-United_Kingdom_Topographic_Map.jpg/569px-Great_Britain-United_Kingdom_Topographic_Map.jpg?20220903003608"></img>
  <figcaption>Wikimedia commons UK Map.</figcaption>
</figure>

## Introduction

This tutorial is for programmers familiar with Python but perhaps less familiar
with the Python `requests` package or ArcGIS @ArcGIS. 

## The Scenario

You would like to use python to programattically ingest data from the Office
for National Statistics (ONS) Open Geography Portal. This tutorial aims to help
you do this, working with the [2021 LSOA boundaries](https://geoportal.statistics.gov.uk/datasets/ons::lower-layer-super-output-areas-2021-boundaries-ew-bfc/explore?location=52.919320%2C-2.395055%2C11.90),
the essential features and quirks of the ArcGIS REST API will be explored.

## What you'll need:

- [ ] A permissive firewall (ask to whitelist the domain "https://geoportal.statistics.gov.uk/")
- [ ] Python package manager (eg `pip`)
- [ ] Python environment manager (eg `venv`, `poetry` etc)
- [ ] Python requirements:

```{.python filename=requirements.txt eval=false}
folium
geopandas
mapclassify
matplotlib
pandas
requests

```

## Tutorial

### Setting Things Up

1. Create a new directory with a requirements file as shown above.
2. Create a new virtual environment.
3. `pip install -r requirements.txt`
4. Create a file called `get_data.py` or whatever you would like to call it.
The rest of the tutorial will work with this file.
5. Add the following lines to the top of `get_data.py` and run them, this 
ensures that you have the dependencies needed to run the rest of the code:

```{python filename=get_data.py}
import requests
import geopandas as gpd
import pandas as pd

```

### Finding The Data Asset

One of the tricky parts of working with the GeoPortal is finding the resource
that you need.

1. Access the ONS Open Geography Portal homepage @ONSGeoPortal.
2. Using the ribbon menu at the top of the page, navigate to Boundaries -> Census Boundaries -> Lower Super Output Areas -> 2021 Boundaries. 
3. Once you have clicked on this optiom, a page will open with items related to
your selection. Click on the item called "Lower Layer Super Output Areas (2021)
Boundaries EW BFC"
4. This will bring you to the data asset that you need. It should look like the
webpage below.

<div class=centerdiv>
  <iframe src="https://geoportal.statistics.gov.uk/datasets/ons::lower-layer-super-output-areas-2021-boundaries-ew-bfc/explore?location=52.375030%2C-3.328324%2C8.44" title="LSOA 2021 Boundaries for England & Wales"></iframe>
</div>

### Finding the Endpoint
Now that we have the correct data asset, let's find the endpoint. This is the
url that we will need to send our requests to, in order to receive the data
that we need.

1. Click on the "View Full Details" button.
2. Scroll down and under the menu "I want to...", and expand the "View API
Resources" menu.
3. You will see two urls labelled "GeoService" and "GeoJSON". Click the copy
button to the right of the url.
4. Paste the url into your Python script.
5. Edit the url string to remove everything to the right of the word 'query',
including the question mark. Then assign it to a variable called `ENDPOINT` as
below:

```{python filename=get_data.py}
ENDPOINT = "https://services1.arcgis.com/ESMARspQHYMw9BZ9/arcgis/rest/services/Lower_layer_Super_Output_Areas_2021_EW_BFC_V8/FeatureServer/0/query"

```

This `ENDPOINT` is a url that we can use to flexibly ask for only the data or
metadata, that we require.

### Requesting a Single Entry

Now that we're set up to make requests, we can use an example that brings back
only a small slice of the database. To do this, we will need to specify some
query parameters. These parameters will get added to our endpoint url and will
be interpreted by ArcGIS to serve us only the data we ask for. In this example,
I will ask for a single LSOA boundary only by specifying the LSOA code with an
SQL clause. For more detail on the flexibility of ArcGIS API, please consult
the documentation @ArcGIS.

1. Define the below Python dictionary, noting that the syntax and data formats
can be brittle - don't forget to wrap the LSOA21CD in speech marks:

```{python filename=get_data.py}
# requesting a specific LSOA21CD
params = {
    "where": "LSOA21CD = 'W01002029'", # SQL clauses can go here
    "outSR": 4326, # CRS that you want
    "f": "geoJSON", # response format
    "resultOffset": 0 # parameter used for pagination later
}

```

2. Now I will define a function that will make the request and handle the
response for us. It's a bit more complicated than the standard approach for
other web APIs because of the peculiar way ArcGIS serves HTTP proxy errors (bad
requests, service outages etc). Go ahead and define this function:

```{python filename=get_data.py}
def request_to_gdf(url:str, query_params:dict) -> gpd.GeoDataFrame:
    """Send a get request to ArcGIS API & Convert to GeoDataFrame.

    Only works when asking for features and GeoJSON format.

    Parameters
    ----------
    url : str
        The url endpoint.
    query_params : dict
        A dictionary of query parameter : value pairs.

    Returns
    -------
    requests.response
        The response from ArcGIS API server. Useful for paginated requests
        later.
    gpd.GeoDataFrame
        A GeoDataFrame of the requested geometries in the crs specified by the
        response metadata.

    Raises
    ------
    requests.exceptions.RequestException
        The response was not ok.
    """
    # this approach will only work with geoJSON
    query_params["f"] = "geoJSON"
    # get the response
    response = requests.get(url, params=query_params)
    if response.ok:
        # good response (hopefully, but be careful for JSONDecodeError)
        content = response.json()
        return (
            response, # we'll need the response again later for pagination
            gpd.GeoDataFrame.from_features(
                content["features"],
                crs=content["crs"]["properties"]["name"]
                # safest to get crs from response
                ))
    else:
        # cases where a traditional bad response may be returned
        raise requests.RequestException(
            f"HTTP Code: {response.status_code}, Status: {response.reason}"
        )

```

Briefly, this function is going to ensure the geoJSON format is asked for, as
this is the neatest way to bash the response into a GeoDataFrame. It then
queries ArcGIS API with the endpoint and parameter you specify. It checks if 
a status code 200 was returned (good response), if not an exception is raised
with the HTTP code and status. Finally, if no error triggered an exception,
the ArcGIS response and a GeoDataFrame format of the spatial feature is
returned.

:::{.callout-caution collapse="true"}
Be careful when handling the response of ArcGIS API. Depending on the query you
send, it is possible to return status code 200 responses that seem fine. But
if the server was unable to make sense of your SQL query, it may result in a
`JSONDecodeError` or even content with details of your error. It is important
to handle the various error conditions if you plan to build something more
robust than this tutorial and to be exacting with your query strings. For this
reason, I would suggest using the `params` dictionary approach to introducing
query parameters rather than attempting to manually format the url string.
:::

3. With that function defined, we can go straight to a tabular data format,
like below:

```{python filename=get_data.py}
_, gdf = request_to_gdf(ENDPOINT, params)
gdf.head()
```

4. We can use the GeoDataFrame `.explore()` method to quickly inspect the fruit
of our efforts.

```{python filename=get_data.py}
gdf.explore()

```




<p id=fin><i>fin!</i></p>
