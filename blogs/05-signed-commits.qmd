---
title: "Set Up Signed Commits on GitHub"
author: "Rich Leyshon"
date: last-modified
description: "A quick guide to setting up commit verification using a GPG key."
categories:         # delete categories as appropriate. using https://diataxis.fr/ documentation definitions.
    - How-to
    - GitHub
    - Authentication
    - Verification
image: /./www/05-signed-commits/verified-badge.png
image-alt: "GitHub verification badge."
toc: true 
execute: 
  eval: false # use code blocks with copy options but don't run the code
format:
  html:
    mermaid:
      theme: default
---
<figure class=center>
  <img class="shaded_box" src="/./www/05-signed-commits/verified-badge.png"></img>
  <figcaption>GitHub verification badge.</figcaption>
</figure>

## Acknowledgement

This article merely collates information from the following sources:

1. [Adding a GPG key to your GitHub account](https://docs.github.com/en/authentication/managing-commit-signature-verification/adding-a-gpg-key-to-your-github-account)
2. [Generating a new GPG key](https://docs.github.com/en/authentication/managing-commit-signature-verification/generating-a-new-gpg-key)
3. [How to understand the `gpg failed to sign the data` problem in git](https://gist.github.com/paolocarrasco/18ca8fe6e63490ae1be23e84a7039374)

For more information and troubleshooting, please visit these sources as they
contain additional guidance which may be helpful for operating systems other
than macos.

## The Scenario

You need to set up commit verification on your computer for the first time.
Possibly you have changed computer and need to quickly set up once more. You
are on macos {{< fa brands apple >}} with access to the terminal.

## What you'll need:

- [ ] macos
- [ ] Your GitHub username
- [ ] The Email address associated with your GitHub account
- [ ] Access to the command line via Command Line Interface (CLI)
- [ ] A secure password wallet

## Instructions

1. In terminal, run:
```{.python filename="terminal"}
git config --global commit.gpgsign true
git config --global tag.gpgsign true
```
2. Visit [GPG suite](https://gpgtools.org/) and download the installer. 
3. Follow the installation steps and quit the screen that attempts to create a
new key
4. In terminal, create a key with:
```{.python filename="terminal"}
gpg --full-generate-key
```
5. At the prompt, accept the default values for key type, size and persistence
6. Ensure you enter your real name, as it appears on GitHub, under your GitHub
profile avatar. Use the primary Email associated with your GitHub account. 
7. Enter a passphrase, confirm it and store it in a secure password wallet. You
will need it again in the final step of this process
8. Print out the long format of the key details with:
```{.python filename="terminal"}
gpg --list-secret-keys --keyid-format=long
```
9. Copy the long form of the key ID from the example output labelled as
`<COPY THIS BIT ONLY>`, do not include the preceeding forward slash:
```python
$ gpg --list-secret-keys --keyid-format=long
/Users/hubot/.gnupg/secring.gpg
------------------------------------
sec   XXXX/<COPY THIS BIT ONLY> 2023-10-23 
uid                          your username
ssb   xxxXXXX/XXXXXXXXXXXXXXXX 2023-10-23

```
10. Adjust this command with your copied key ID and run in terminal:
```{.python filename="terminal"}
git config --global user.signingkey <INSERT YOUR KEY ID>

```
11. Paste your key ID into the command below and execute in terminal: 
```{.python filename="terminal"}
gpg --armor --export <INSERT YOUR KEY ID>
```
11. Copy the output, including the `-----BEGIN PGP PUBLIC KEY BLOCK-----`  and
`-----END PGP PUBLIC KEY BLOCK-----` sections.
12. Go to the GPG Keychain app, it should have detected the key in your
clipboard and ask you to import the key to your keychain. Click OK
13. Over to your web brower, go to GitHub <i class="fa-solid fa-arrow-right"></i> profile pic <i class="fa-solid fa-arrow-right"></i> settings <i class="fa-solid fa-arrow-right"></i> SSH and GPG keys
14. Add a new key to your account, give it an appropriate title and paste the
key from your clipboard
15. GitHub will ask you to authenticate in order to make this change
16. Now ensure Git knows where to look for your GPG program:

```{.python filename="terminal"}
where gpg
```
Copy the path to the GPG program.

17. Update the command below with the path in your clipboard:
```{.python filename="terminal"}
git config --global gpg.program "<INSERT/PATH/HERE>"
```
18. Check that your git config file looks as expected:
```{.python filename="terminal"}
git config --global --list 
```
Example output:
```
user.name=<YOUR GITHUB USERNAME>
user.email=<YOUR PRIMARY GITHUB EMAIL>
user.signingkey=<YOUR GPG KEY ID>
commit.gpgsign=true
gpg.program=<PATH TO YOUR GPG PROGRAM>
tag.gpgsign=true

```
19. The next time you need to commit, you will be asked to enter the passphrase
you saved to your password wallet in order to add the key to your keychain

## Troubleshooting

:::{.callout-caution collapse="true"}

### gpg: signing failed: Inappropriate ioctl for device

Add the below to your initialisation file (eg ~/.zshrc or equivalent):  

```{.python filename="~/.zshrc"}
GPG_TTY=$(tty)
export GPG_TTY
```
Restart your terminal. Try to commit once more. Youâ€™ll be asked for the GPG
passphrase that you stored in your password wallet.
:::

<p id=fin><i>fin!</i></p>
