---
title: "Analyse a Cycling Network with r<sup>5</sup>py"
author: "Rich Leyshon"
date: "February 03 2024"
description: "Using r<sup>5</sup>py to analyse service coverage in the London's Boris Bike network."
categories:         # delete categories as appropriate. using https://diataxis.fr/ documentation definitions.
    - Tutorial
    - Transport Modelling
    - REST API
    - Web data
    - Geospatial
image: "https://images.pixexid.com/a-dynamic-image-of-a-cyclist-her-face-focused-and-determined-captured-mid-peda-cpglmien.jpeg?h=699&amp;q=70"
image-alt: "A dynamic image of a cyclist, her face focused and determined, captured mid-pedal against the backdrop of a bustling city by [Ralph](https://pixexid.com/profile/cjxrsxsl7000008s6h21jecoe)"
toc: true
jupyter: 
  kernelspec:
    name: "conda-env-cycling-env-py"
    language: "python"
    display_name: "blog-cycling-env"
---

<figure class=center>
  <img class="shaded_box" width="400px" src="https://images.pixexid.com/a-dynamic-image-of-a-cyclist-her-face-focused-and-determined-captured-mid-peda-cpglmien.jpeg?h=699&amp;q=70"></img>
  <figcaption style="text-align:center;">Creative commons license, created by [Ralph](https://pixexid.com/profile/cjxrsxsl7000008s6h21jecoe)</figcaption>
</figure>

## Introduction

[r<sup>5</sup>py is a relatively new transport modelling package](https://r5py.readthedocs.io/en/stable/)
available on PyPI. It provides convenient wrappers to
[Conveyal's r<sup>5</sup> Java library](https://github.com/conveyal/r5), a
performant routing engine originating from the ubiquitous Open Trip Planner
(OTP). Whereas r<sup>5</sup>py may not be as feature-rich as OTP, its unique
strength is in the production of origin:destination matrices at scale. This is
important if the intention is to produce stable statistics based on routing
algorithms, where the idiosyncracies of local transport service availability
means that departure times can have a significant impact upon overall journey
duration.

In summary, r<sup>5</sup>py achieves stable statistics by calculating travel
times over multiple journeys within a time window, returning insightful
summaries such as the median duration required to travel from point A to B.

:::{.callout-caution collapse="true"}

### A Note on the Purpose

This tutorial aims to familiarise the reader with r<sup>5</sup>py and how it
integrates with the python geospatial ecosystem of packages. This article is
not to be used to attempt to infer service quality outcomes or to inform policy
decisions. Limitations of this analysis and suggested improvements will be
discussed throughout.

:::

### Intended Audience

Experienced python practitioners familiar with the typical python GIS stack, eg
geopandas, shapely, fiona and folium. Familiarity with r<sup>5</sup>py and
routing operations is not required.

### Outcomes

* Ingest London bike charging station locations.
* Visualise charging stations in an interactive hex map.
* Create a naive point plane of destinations.
* Check that the point plane is large enough to accommodate station locations.
* Calculate origin:destination travel time matrix, by cycling modality and 
with a maximum journey time of 30 minutes.
* Engineer features to help analyse the cycling network accessibility.
* Visualise the cycling network coverage and the most remote points within that
area.

### What You'll Need:

- [ ] Conda or miniconda
- [ ] pip package manager
- [ ] Ability to install Java Development Kit
- [ ] Ability to request from Transport for London api
- [ ] Tutorial compatible with macos. `subprocess` calls may require adaptation
for other operating systems.

```{.python filename=requirements.txt eval=false}
contextily
geopandas
matplotlib
pydeck
pyprojroot
r5py
requests
scikit-learn

```
### Getting Started

It is required to configure a Java Virtual Machine for this tutorial. The
transport routing depends on this. Please consult the r<sup>5</sup>py
installation documentation @r5pyInstallation for guidance.

## London Cycle Station Service Coverage

Start by loading the required packages.

```{python}
import datetime
import os
import subprocess
import tempfile 

import contextily as ctx
import geopandas as gpd
import matplotlib.pyplot as plt
import pandas as pd
import pydeck as pdk
import pyproj
from pyprojroot import here
import r5py
import requests
from sklearn import preprocessing
from shapely.geometry import Polygon

```

### Ingesting Data

Firstly, we must acquire information about the transport network. There are
a few sources of this, but we shall use [BBBikes](https://extract.bbbike.org/)
website to ingest London-specific extracts. The required data should be in
protocolbuffer (.pbf) format.

#### Exercise 1

Find the appropriate url that points to the london.osm.pbf file. Ingest the
data and store at an appropriate location.

::: {.panel-tabset}

##### Hint

::: {.callout-tip collapse="true"}
## Click to expand hint
Either using python requests or subprocess with the `curl` command, request
the url of the pbf file and output it to a data folder.

:::

##### Solution

```{python}
#| code-fold: true
#| code-summary: "Show Solution"

# tmp = tempfile.TemporaryDirectory()
# subprocess.run(
#     [
#         "curl",
#         "https://download.bbbike.org/osm/bbbike/London/London.osm.pbf",
#         "-o",
#         os.path.join(tmp.name, "london.osm.pbf"),
#     ]
# )
# temp write to file to avoid repeat ingests

if not os.path.exists(here("data/london.osm.pbf")):
  subprocess.run(
      [
          "curl",
          "https://download.bbbike.org/osm/bbbike/London/London.osm.pbf",
          "-o",
          here("data/london.osm.pbf"),
      ]
  )

```

:::





```{python}
# Tidy up
# tmp.cleanup()

```

### Tips

* When encountering issues with quarto render, it can be informative to examine

## Conclusion

This article has walked the reader through setting up a basic quarto project,

<p id=fin><i>fin!</i></p>
