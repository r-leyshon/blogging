---
title: "How to Automate Quarto Builds with GitHub Actions"
author: "Rich Leyshon"
date: September 10 2023
description: "Setting up a website with Quarto? Want to automate the website
build and publication with GitHub Actions? Could you use a quick guide? I've
got your back."
categories:         # delete categories as appropriate. using https://diataxis.fr/ documentation definitions.
    - How-to   # task-oriented
    - CI:CD
    - Front End Dev
image: https://i1.pickpik.com/photos/452/586/379/code-html-digital-coding-preview.jpg # creative commons
image-alt: "HTML code."
toc: true
format:
  html:
    css: /./www/styles.css
---
## Assumptions

* You're set up with a [GitHub account](https://github.com/).
* You're able to run git commands @GitHubGit from a command line interface (CLI).
* You've installed quarto. @HelloQuarto
* You've a preferred text editor installed, eg Visual Studio Code, Atom or
similar.

This guide is based on the useful quarto continuous integration (CI)
documentation @quartoCIdocs and the examples provided within the Quarto CI
GitHub repository @QuartoDevCI.

## CI for Quarto

The repository used for setting up this example is
[available on GitHub](https://github.com/r-leyshon/quarto-ci-example).

The renderred site should look like this on
[GitHub Pages](https://r-leyshon.github.io/quarto-ci-example/).

### In the GitHub User Interface

1. Create a repository.
2. Copy the clone url.

### In the CLI
3. `cd` to wherever you would like to keep your local clone.
4. `git clone <INSERT REPO URL>`
5. `cd <INSERT REPO PATH>`
6. `touch .github/workflows/publish-quarto.yml`
7. `touch index.qmd`
8. `touch .nojekyll`
9. `touch _quarto.yml`

### In the text editor 
10. Copy and paste the below into `.github/workflows/publish-quarto.yml`
(you may need to enable viewing hidden files on your system - command + shift +
. On macOS):

```YML
name: Render and Publish
on:
  push:
    branches:
      - main  # changes pushed to this branch will trigger a build.

jobs:
  build-deploy:
      runs-on: ubuntu-latest
      permissions:
        contents: write
      steps:
        - name: Check out repository
          uses: actions/checkout@v3
          
        - name: Set up Quarto
          uses: quarto-dev/quarto-actions/setup@v2
          with:
            version: 1.3.340

        - name: Publish to GitHub Pages (and render)
          uses: quarto-dev/quarto-actions/publish@v2
          with:
            target: gh-pages # renderred html files will be pushed here
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # this secret is always available for github actions

```

11. Copy paste the below into the `index.qmd`, using your preferred text
editor:

```YML
---
title: Hello Quarto CI
date: last-modified
resources:
  - .nojekyll
---
Setting up CI for quarto website build & publish.
```

12. Copy paste the following into `_quarto.yml`:

```YML
project:
  type: website
  output-dir: docs
execute:
  freeze: auto
format: html

```
### Back in the CLI

13. At the project root: `quarto render`. This will make a docs folder with
your rendered website, a directory called index_files with more site
dependencies and a .gitignore file. The only file needed to be committed is the
.gitignore.
14. `echo /docs/ >> .gitignore `
15. `echo /index_files/ >> .gitignore`
16. `git status` should look like this:

```
On branch main
Your branch is up to date with 'origin/main'.

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        .github/workflows/publish-quarto.yml
        .gitignore
        _quarto.yml
        index.qmd
```

17. `git add .`
18. `git commit -m "Configure quarto"`
19. `git push`

### Back to the Web Browser
20. If the push was successful, navigate to your repository
21. Click on the drop down arrow next to main branch
22. Click on 'view all branches'
23. Click the 'new branch' button
24. Create the branch `gh-pages`
25. Click on 'settings' in the top ribbon of the repo site
26. Click on 'Pages' in the menu to the left
27. Check that your GitHub Pages is setup is Build and deployment > Source >
Deploy from a branch
28. Check that the Branch setup is gh-pages /root
29. After the CI has finished building, you can click on the url that appears
at the top of this page under “GitHub Pages” to check that the site has been
deployed properly. Copy the url of your GitHub Pages site.

### Head Back to your Local Repo

30. Insert your url into your `_quarto.yml`, like below:

```
project:
  type: website
  output-dir: docs
execute:
  freeze: auto
format: html
website:
  site-url: "<YOUR_URL_HERE>" # makes site links work on your remote site
```

## Creating a Workflow Build Status Badge
* Use the following format to create a workflow build status badge in your
readme: `https://github.com/OWNER/REPOSITORY/actions/workflows/WORKFLOW-FILE/badge.svg`   
For example: `https://github.com/r-leyshon/quarto-ci-example/actions/workflows/publish-quarto.yml/badge.svg`    
* Finally, embed the url in the src of a markdown image, like: 
`![example workflow](https://github.com/r-leyshon/quarto-ci-example/actions/workflows/publish-quarto.yml/badge.svg)`

![example workflow](https://github.com/r-leyshon/quarto-ci-example/actions/workflows/publish-quarto.yml/badge.svg)
<p id=fin><i>fin!</i></p>
