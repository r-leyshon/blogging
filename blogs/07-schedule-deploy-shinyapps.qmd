---
title: "Scheduled Deployment to Shinyapps.io"
author: "Rich Leyshon"
date: last-modified
description: "How to ingest data using Python requests & ArcGIS REST API."
categories:         # delete categories as appropriate. using https://diataxis.fr/ documentation definitions.
    - How-to
    - Python Shiny
    - CI/CD
    - GitHub
image: https://upload.wikimedia.org/wikipedia/commons/thumb/1/15/Prague_astronomical_clock_%286365120743%29.jpg/800px-Prague_astronomical_clock_%286365120743%29.jpg?20150530221207
image-alt: "Prague astronomical clock"
toc: true
---
<figure class=center>
  <img class="shaded_box" width=400px src="https://upload.wikimedia.org/wikipedia/commons/thumb/1/15/Prague_astronomical_clock_%286365120743%29.jpg/800px-Prague_astronomical_clock_%286365120743%29.jpg?20150530221207"></img>
  <figcaption style="text-align:center;">[Wikimedia commons](https://commons.wikimedia.org/wiki/File:Prague_astronomical_clock_(6365120743).jpg): [Creative Commons](https://creativecommons.org/licenses/by/2.0/deed.en)</figcaption>
</figure>

## Introduction

This guide will walk you through the process of using GitHub Actions to
schedule the update of a python shiny application and subsequent publication to
the shinyapps.io @ShinyAppsIO service. The example used in this
article is trivial and the [source code can be inspected here](https://github.com/r-leyshon/automate-shinyapps-deploy). This guide intends to help the casual developer
keep their application data up-to-date. 

:::{.callout-caution}

The tooling used in this article may not suit all requirements. GitHub Actions
and Shinyapps.io all provide free tier services, allowing for equitable access.
These services are ideal for prototyping purposes but come with limitations
that may render them unsuitable for your purposes. For more information on the
features of these services, please consult the Shinyapps.io features
@ShinyAppsIOFeatures and the GitHub Actions documentation @GitHubActions.

:::

### Intended Audience

An experienced python and git practitioner, able to create and manage a virtual
environment but less familiar with the shinyapps.io service or GitHub Actions.

### The Scenario

You have or are considering building a dynamic application, presenting the
latest view of some data to your users. You would like to automate the data
retrieval and application publication processes.

### What you'll need:

- [ ] A GitHub account
- [ ] A shinyapps.io account
- [ ] A permissive firewall
- [ ] Python package manager (eg `pip`)
- [ ] Python environment manager (eg `venv`, `poetry` etc)
- [ ] Access to a command line interface (CLI) such as terminal / Bash.
- [ ] Python requirements:

```{.python filename=requirements.txt eval=false}
shiny
rsconnect-python

```

## Develop the application

The steps in this guide result in a
[minimal application](https://richleysh84.shinyapps.io/scheduled-deployment/)
that reports the time that it was deployed to shinyapps.io.

### Configure the Development Environment

1. Create a new repository or; if you would rather skip the application
development; [clone this repository](https://github.com/r-leyshon/automate-shinyapps-deploy)
and proceed to the [deployment stage](#deploying-the-application).
2. Clone the repository into your local development environment.
3. Create a clean virtual environment with python 3.11. At the time of writing,
this is the most current version of python available to shinyapps.io servers.
4. Activate the environment.
5. Install the requirements.txt dependencies.

### Prepare the Data

This job prepares the database on which the application will depend. In this
trivial example, we simply save the current time as a formatted string to a
text file. This simple artifact will later be read into a shiny app to present
as the time of deployment.

1. Create a python file called `save_time.py`.
2. Paste the following content into `save_time.py` and hit save:

```{.python filename=save_time.py eval=false}
from datetime import datetime
nw = datetime.now()
nw = datetime.strftime(nw, "%Y-%m-%d %H:%M:%S")
with open("saved_time.txt", "w") as f:
    f.write(nw)
    f.close()
print(f"Saved time is {nw}")

```
3. Run `python3 save_time.py` in the terminal. A `saved_time.txt` file should
appear in the project root.

### Present the Data

An application is needed to present the data to your user. In this example, the
app will simply read in the date string created in the section
[Prepare the Data](#prepare-the-data), format the datestring in a sentence and
present it within the user interface.

1. Create a python file called `app.py`.
2. Paste the following into `app.py`:

```{.python filename=save_time.py eval=false}
from shiny import App, render, ui
# get the saved time
with open("saved_time.txt", "r") as f:
    nw = f.readlines()[0]
    f.close()

app_ui = ui.page_fluid(
    ui.h2("Testing Deploy Schedule."),
    ui.output_text("txt"),
)

def server(input, output, session):
    @output
    @render.text
    def txt():
        return f"Deployed at {nw}."

app = App(app_ui, server)

```
3. Test the application locally by running it. This can be done from the CLI
with the command `python -m shiny run ./app.py`.

4. If the application successfully launches, you should see a localhost url
printed. Command and click on this or paste into your browser to confirm that
the application deployed successfully. You should see the a sentence
`Deployed at <SOME_DATETIME_INSERTED_HERE>`.

## Deploy the Application


<p id=fin><i>fin!</i></p>
