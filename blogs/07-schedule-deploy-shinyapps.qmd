---
title: "Scheduled Deployment to Shinyapps.io"
author: "Rich Leyshon"
date: last-modified
description: "How to ingest data using Python requests & ArcGIS REST API."
categories:         # delete categories as appropriate. using https://diataxis.fr/ documentation definitions.
    - How-to
    - Python Shiny
    - CI/CD
    - GitHub
image: https://upload.wikimedia.org/wikipedia/commons/thumb/1/15/Prague_astronomical_clock_%286365120743%29.jpg/800px-Prague_astronomical_clock_%286365120743%29.jpg?20150530221207
image-alt: "Prague astronomical clock"
toc: true
---
<figure class=center>
  <img class="shaded_box" width=400px src="https://upload.wikimedia.org/wikipedia/commons/thumb/1/15/Prague_astronomical_clock_%286365120743%29.jpg/800px-Prague_astronomical_clock_%286365120743%29.jpg?20150530221207"></img>
  <figcaption style="text-align:center;">[Wikimedia commons](https://commons.wikimedia.org/wiki/File:Prague_astronomical_clock_(6365120743).jpg): [Creative Commons](https://creativecommons.org/licenses/by/2.0/deed.en)</figcaption>
</figure>

## Introduction

This guide will walk you through the process of using GitHub Actions to
schedule the update of a python shiny application and subsequent publication to
the shinyapps.io @ShinyAppsIO service. The example used in this
article is trivial and the [source code can be inspected here](https://github.com/r-leyshon/automate-shinyapps-deploy). This guide intends to help the casual developer
keep their application data up-to-date. 

:::{.callout-caution}

The tooling used in this article may not suit all requirements. GitHub Actions
and Shinyapps.io all provide free tier services, allowing for equitable access.
These services are ideal for prototyping purposes but come with limitations
that may render them unsuitable for your purposes. For more information on the
features of these services, please consult the Shinyapps.io features
@ShinyAppsIOFeatures and the GitHub Actions documentation @GitHubActions.

:::

### Intended Audience

An experienced python and git practitioner, able to create and manage a virtual
environment but less familiar with the shinyapps.io service or GitHub Actions.

### The Scenario

You have or are considering building a dynamic application, presenting the
latest view of some data to your users. You would like to automate the data
retrieval and application publication processes.

### What you'll need:

- [ ] A GitHub account
- [ ] A shinyapps.io account
- [ ] A permissive firewall
- [ ] Python package manager (eg `pip`)
- [ ] Python environment manager (eg `venv`, `poetry` etc)
- [ ] Python requirements:

```{.python filename=requirements.txt eval=false}
shiny
rsconnect-python

```

## Developing the application

## Automating the Deployment

<p id=fin><i>fin!</i></p>
