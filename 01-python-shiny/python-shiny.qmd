---
title: "Python for Shiny"
author: "Rich Leyshon."
date: today
date-modified: last-modified
toc: true
format:
  html:
    mermaid:
      theme: default
---
## Python for Shiny is now a thing...

<figure class=center>
  <img src=/./www/01-python-shiny/shiny-python.png alt="AI-generated drawing of a shiny python.">
  <figcaption>[DALL.E prompt](https://huggingface.co/spaces/dalle-mini/dalle-mini): python logo golden Sparkling glittery bokeh bright.</figcaption>
</figure>

[Python Shiny](https://pypi.org/project/shiny/) celebrates its first year
anniversary on PyPi in July 2023. In case that needs further qualification, this
is the Python-native implementation of the beloved RShiny dashboarding package
that has been available in the R programming framework for over a decade now. 
Python Shiny has benefited from the experience that the developers at
[Posit](https://posit.co/) have gained in building its more mature,
R-flavoured sibling.

Python Shiny has experienced what I would describe as an accelerated evolution
and has the potential to become a front runner in production-grade
applications. Mainly because it adheres to an evaluation strategy which is a bit
'un-pythonic'. Shiny introduces dashboarding with lazy evaluation, meaning that
elements of your code will only be evaluated when there is a need to do so. This
is not always a great idea, particularly for standard scripting purposes. But it
does make event-drive applications more efficient and scalable. More on
[Posit's take on the USP of Python Shiny here](https://posit.co/blog/why-shiny-for-python/).

Let's consider the following example in Python:

```{python}
# In Python
try:
  def failing_print(param_a="Am I lazy?", param_b=absolutely_not):
    print(param_a)
except NameError:
  print("Python woud not allow me to define this function.")

```

Strict (also known as eager) evaluation in Python has triggered an error. I've
had to catch the error above with the try/except clause in order to render this
website. Even though `failing_print()` never calls on `param_b`, Python checks
that the default value of that parameter exists on definition of the function.

Let us now compare to the situation in R.

```{r}
# In R
passing_print <- function(param_a = "Am I lazy?", param_b = yes_you_are){
  print(param_a)
}
print(paste("Does `yes_you_are` exist? : ", exists("yes_you_are")))
passing_print()

```

No exception was raised although the value `yes_you_are` has not been defined.

Lazy evaluation in Python Shiny minimises the work the application needs to
undertake. Values in the app backend will only be re-evaluated as they are
needed and contrasts with more pythonic approaches to dashboarding, such as the
case with the [streamlit package](https://streamlit.io/).

<br>

***
## An Example Python Shiny App

This application is written in Python and served with a free [shinyapps.io](https://www.shinyapps.io/)
account. I made the app to explore the quality of the spatial data available
within [Open Street Map](https://www.openstreetmap.org/) (OSM) data for certain
urban areas. Open Street Map is an open-source, community-maintained source of
transport network data. The files also contain other spatial features, such as
landuse polygons. The quality of this data varies by location, as you may find
in the app. 

The application is pretty straight forward. It uses pandas to read in some
pre-prepared data tables from a data folder. These files were prepared with
a python package called [pyrosm](https://pyrosm.readthedocs.io/en/latest/).
Pyrosm is a useful application for ingesting, assessing & visualising OSM data.
Selecting a city from the dropdowns then clicking the "Go" button will read the
correct table from this little database, then using matplotlib, it visualises
the selected spatial features. The app also presents some simple summary
statistics in tables at the bottom of the page. 

The preparation of the data files is not strictly necessary. You can serve an 
app and have it make external connections to data services to ingest data. In
this instance, I chose to pre-process the data as it helped to improve the
performance of the app. Even so, selecting London or Leeds can result in some
wait times, so please be aware of this. Options for improving the performance 
further could include parallel processing, though that is not implemented here
and is beyond the scope of this little example.

If you'd like to take a look at the application code and have a GitHub account,
[you can access it here](https://github.com/r-leyshon/pyrosm-experiments/blob/main/pyrosm-cities-app/app.py).

<div class=centerdiv>
  <iframe src="https://richleysh84.shinyapps.io/pyrosm-cities-app/" title="Python Shiny Open Street Map Application" style="border:0.3em solid lightgray" align=center></iframe>
<div>


***


## So what does a Shiny project look like?

### Organising a Shiny Project

Below is a directory tree diagram of the example Shiny application presented above. It shows the file structure in the various folders.

```
.
├── 01-update-db.py
├── app.py
├── config
│   └── 01-update-db.toml
├── data
│   ├── leeds-landuse-2023-06-19.arrow
│   ├── leeds-natural-2023-06-19.arrow
│   ├── leeds-net-driving-2023-06-19.arrow
│   ├── london-landuse-2023-06-19.arrow
│   ├── london-natural-2023-06-19.arrow
│   ├── london-net-driving-2023-06-19.arrow
│   ├── marseille-landuse-2023-06-19.arrow
│   ├── marseille-natural-2023-06-19.arrow
│   ├── marseille-net-driving-2023-06-19.arrow
│   ├── newport-landuse-2023-06-19.arrow
│   ├── newport-natural-2023-06-19.arrow
│   └── newport-net-driving-2023-06-19.arrow
├── requirements.txt
└── rsconnect-python
    └── pyrosm-cities-app.json
```

The shiny code that generates the application is in `app.py`. The data folder is where you put any data files you'd like to work with. Here I'm working with the .arrow format ([More on that here](https://datapythonista.me/blog/pandas-20-and-the-arrow-revolution-part-i)). However, this folder could be used to store csvs, images, a GeoJSON database, whatever your application needs. 

The file `01-update-db.py` and the contents of the `config` folder are related. The python script is used to update the database in the `data` folder. This part of the workflow can be quite time consuming, particularly extracting the transport network from dense areas such as Greater London. In order to improve the performance of the app, I chose to pre-prepare this data and limit the number of areas to my specific use-case. A previous iteration of this dashboard simply sent requests using the python `pyrosm` package to get data for any valid area name. The TOML file in the config folder simply stores some parameters used to configure `01-update-db.py`, such as named areas of interest, bounding box coordinates in order to crop the maps, that sort of thing.
The `requirements.txt` file is super important. Not only will it help others to re-run your dashboard with the required package dependencies made explicit, this is also a file that hosting services such as [shinyapps.io](https://www.shinyapps.io/) will use to recreate your development environment. More on that later.

::: {.callout-note appearance="simple"}

### Tip

Ensuring that you have 'pinned' each package version in your requirements file will make publishing to a hosting service such as shinyapps.io a lot easier. It can be frustrating to push your locally working application up to a remote service, wait for a potentially lengthy deployment routine to complete only to see that your app breaks as your working on a different version of `numpy` than the one available by default in the remote server.

:::

Finally, the `rsconnect-python` directory is not something that would appear in your shiny project until you deploy it to a remote-hosting service like shinyapps.io. It contains some metadata about your application which the remote service will use to setup your app properly.

### A Closer Look At `app.py`

As stated earlier, this is where your app code goes. But before diving straight into some code, let's try to get a feel for how the reactivity works. 

<div class="center_diagram">

```{mermaid}
%%linkStyle default stroke: blue

flowchart TD
  user["User"]
  subgraph Application
  server["Server
  - Executes python code.
  - Processes data.
  - Translates outputs into HTML.
  "]
  ui["User Interface
  - Displays input widgets.
  - Displays rendered server outputs.
  - Can be adjusted with HTML & CSS."]
  db[("Data")]
  end
  user -->|Input Values| ui <-->|Dynamic Values| server
  db -->|Read| server

linkStyle default stroke-width:1px,color:blue;

```

</div>
<br>

Each Shiny application comes in two distinct sections. The user interface is the frontend of the application, where a person engages with elements of a web page in order to control visuals, filter tables and so on. The web page translates Python code into HyperText Markup Language (HTML). HTML can be interpreted by a web browser in order to present the user with a structured web page. But in order to present an attractive webpage, this HTML foundation needs to be styled. So Cascading Style Sheets (CSS) are used to add decoration to the foundation established by HTML.

### Server-Side Shenanigans

Having an attractive webpage that does not do something when you click around on it, enter your credit card details or click 'decline' on cookie consent notices would be rather pointless. This is where a web developer would use the language of the browser to work with data behind that pretty frontend. That language is JavaScript and it's remarkably versatile and intimidating to many data-types. 

So to make a functioning app, you need to learn 3 distinct languages. For this reason, packages such as Shiny, Dash and Streamlit have become very popular with analysts working within open-source programming frameworks such as Python and R. They allow the creation of applications while adhering to the syntax that an analyst would be more familiar with. Abstracting all that front-end know-how behind some very straight-forward Python code allows the analyst to focus their efforts on the parts of their job that they excel in - gaining insight from data.

There would be little value in emulating the excellent Posit documentation on getting started with Python Shiny. To do that, I suggest [using their docs](https://shiny.posit.co/py/). In combination with the examples provided, a comprehensive introduction to Shiny is readily available. In the next section, I will focus on introducing a minimal application and then expanding on some of the more subtle considerations in the reactive flow of the backend. I'll choose to focus on things where I've needed to learn by trial and error, or by searching the Stack Overflow boards through some of the inevitable roadblocks a person encounters when programming dashboards. I'll throw in some common 'gotchas' for good measure. 

The fastest way to get up and running with Python Shiny would be to play with the interactive code snippets that Posit make available on their [overview documentation](https://shiny.posit.co/py/docs/overview.html). They host live Shiny sessions with the interactive app and backend code side-by-side. This is a great place to try things out and feel free to copy code from the examples I provide here.

### Let's Build a Basic App

Below is a really minimal app that doesn't do very much at all. Try pasting it into the Posit webpage and clicking the play button in the corner of the page to re-run the code.


```{python eval=FALSE}
#1 Import modules to help us build our app
from shiny import ui, App

#^putting things above the app means they can be shared between your ui and server

app_ui = ui.page_fluid(
  #2 all of the elements you wish to show your user should go within the ui
    ui.input_text(
        id="name_entry",
        label="Please enter your name",
        placeholder="Your name here"
        )
)

def server(input, output, session):
  #3 this is where your app logic should go. So far, not much...
    return None
  
# Finally - this bit packages up our ui and server. Super important - it must be named `app`.
app = App(app_ui, server)

```

You'll see that the code defines an `app_ui` object, which is a shiny ui instance. Within that `ui.page_fluid()` function, we can specify all the elements of the app that we would like to present to our users.

::: {.callout-note appearance="simple"}
### On Users...
There are only two industries that call their customers “users”: illegal drugs and software – Edward Tufte
:::

So far, only one simple ui element has been defined. The humble text input `ui.input_text()` which allows our users to place their own text into a text field. Notice that in Python, all the inputs begin with `input...`. There's `ui.input_text()` as we've seen, but there's lots more. `ui.input_date()`, `ui.input_file()` and `ui.input_slider` to name a few. This consistent syntax approach is a subtle improvement over RShiny and makes it so much easier to work with the vast array of widgets without having to remember them all. If you're working in a modern editor such as [Visual Studio Code](https://code.visualstudio.com/), simply typing `ui.input` will remind you of all the options available to you. For those not working in a nice GUI like VSCode, a [shiny cheatsheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/shiny.pdf) may be useful, though note that at the time of writing I could only find R-flavoured ones...

All ui input elements start with the same 2 arguments, `id` and `label`:

* `id`: The internal name of the input. What does that mean? Call it what you like. Whatever you choose, be aware that when you want to use the values from the text input to do something in the server, it's this name that you will need to reference.
* `label`: A short piece of text that prompts your user to do something. This will be displayed in your ui above the input element. 

Unfortunately, so far our app doesn't actually do much. Typing into the empty text field yields no result. That's because right now, our `server` function simply returns `None`. Let's resolve this.

```{python, eval=FALSE}
#1 update the import statement to include `render` module
from shiny import ui, App, render

app_ui = ui.page_fluid(
    ui.input_text(
        id="name_entry",
        label="Please enter your name",
        placeholder="Your name here"
        ),
    #2 Include a UI output element. This will show the calculations
    # made in the server back to the user.
    ui.output_text_verbatim("greeting"),
)

def server(input, output, session):
    #3 Update the server with a function that handles the text response.
    @output # use the output decorator to mark this function
    @render.text # also need to ensure we use the correct render decorator
    def greeting():
        """
        This function will take the output of the ui.input_text() element,
        format the string in a polite sentence and format it as an HTML
        output for the UI to show.
        """
        return f"Hi {input.name_entry()}, welcome to Python Shiny."

app = App(app_ui, server)

```

There's quite a lot going on in the above code chunk. Let's start with the
decorators `@output` & `@render.text`:

* `@output`: Any function marked with this decorator will have its returned
value made available to the user interface. Notice that in the line `ui.output_text_verbatim("greeting")` we are able to call on the values of the
server's `greeting()` function that we marked as an `@output`.
* `@render.text`: This tells Shiny what type of output to handle. Is it text, a chart (`@render.plot`) or something more fancy, like dynamically rendered ui (`@render.ui`). These output types all have their corresponding output functions to use in the ui. Here we called `ui.output_text_verbatim()`.
* Calling the wrong ui-side function may not result in an error, but can have unexpected results, such as your text disappearing from your app. Keep an eye out for that if things aren't working - are you using the correct combination of `render` in the server with `output_...` in the ui?

Did you notice anything off-putting about the above code? Yes, too many comments but please indulge me. Functions in the server and ui are passing values back and forth. That can be a bit overwhelming to get your head around when your new to what's known as 'event-driven programming'. All that means is that the program needs to respond to some action taken by the user. The syntax in which you reference the functions are inconsistent. Lets take a closer look:

If I mark some function `make_plot()` in the server as an `@output` and then wish to call on its value within the ui, I need to use `ui.output_plot("make_plot")`. Notice the lack of brackets following the function name `"make_plot"`. Getting this wrong will result in a `ValueError`. Forgetting to wrap the function reference in a string will result in a `NameError`.

Now in the other direction, perhaps we have a numeric input passing integer values from the user to the server. We'll give the slider widget the `id="int_slider"`. Now when we want to use the value of this slider on the server-side, we use a different syntax: 
```
def print_selection():
    n = int_slider()
    return f"You chose {n}!"
```

Notice this time, we include brackets after our call to the widget id: `n = int_slider()`. Weird, right? Getting this wrong may result in unexpected behaviours. Keep an eye out for this. Also, wrapping server id references in speech marks results in unexpected behaviours, but not necessarily errors.

If I haven't lost you yet, well done! Debugging applications can be a very frustrating process - part intuition earned from hours of shiny debugging, part [Stack Overflow](https://stackoverflow.com/) and part coping mechanisms. I'll cover some of those in the Tips section.

One final adjustment to this app. When you're typing a name into the text input field, there's a bit of a race going on. Can you type faster than the server can render the text? This may not be what you want. In fact, you may require a bunch of selections to be made prior to calculating anything in the server. We can use methods to interrupt and isolate elements of the server. In effect, we can tell any of our server functions to hang fire until a certain condition is met. In this example, we'll try out perhaps the simplest way of achieving this, enter the `ui.input_action_button()`.

```{python eval=FALSE}
#1 Import the reactive module from Shiny
from shiny import ui, render, App, reactive

app_ui = ui.page_fluid(
    ui.input_text(
        id="name_entry",
        label="Please enter your name",
        placeholder="Your name here"
        ),
    #2 add an action button to the ui, much like we did with the text input
    ui.input_action_button(id="go_button", label="Click to run..."),
    # add some visual separation to the text output
    ui.tags.br(),
    ui.tags.br(),

    ui.output_text_verbatim("greeting"),
)

def server(input, output, session):
    #3 add an additional mark below the others
    @output
    @render.text
    @reactive.event(input.go_button)
    def greeting():
        return f"Hi {input.name_entry()}, welcome to Python Shiny."

# This is a shiny.App object. It must be named `app`.
app = App(app_ui, server)

```

If you copy the above code into the shiny docs, you should now see that an input button has appeared and the sentence won't get printed out until you press it. I also included some visual separation between elements in the ui by using `ui.tags.br()`. If you know a little HTML, you may get excited at that. You can access all the typical HTML tags in this way:
```{python}
from shiny import ui
dir(ui.tags)
```

Also notice that the inconsistency in how to refer to functions on the other side of the ui:server divide rears it's head once more. All in the server, when we want to use the values returned by the text input, we use the syntax `input.name_entry()`. When we want to use the action button in the reactive decorator, we have to use `input.go_button` - no parenthesis! The docs describe this as when you need to access the returned value versus when you need to call the function. This does makes sense but can introduce some cognitive conflict while you are working with Shiny. I hope by version 1.0 the development team can find a way to simplify things.

So there you have it. A very basic application that can be used to print out some simple messages to your user. This is of course a trivial app in order to keep things basic for the purposes of this blog. If you'd like to investigate what's possible with Shiny, I'd suggest taking a peek through the [Posit docs examples](https://shinylive.io/py/examples/) and the [Python Shiny gallery](https://shiny.posit.co/py/gallery/). In the next section I'll go over some tips that may help with common pitfalls I've encountered while working in Shiny.

## Tips

### Shiny for Python VSCode Extension

The [Shiny for Python](https://marketplace.visualstudio.com/items?itemName=Posit.shiny-python) extension is a convenient way to launch Python Shiny apps. It adds a 'Run Shiny App' button to the VS Code interface, allowing for options to serve the app locally within a dedicated VS Code viewer window, or alternatively launch the app directly within your default web browser.

In order to run your application with this extension, you must ensure your app file is saved as `app.py`, otherwise the run button will not recognise that the currently selected document is a Shiny app.

### Header Accessibility Adjustment

A big shoutout to Utah State University for making their fantastic suite of web accessibility-checking tools open source. These tools make checking the accessibility of your web products much easier. Simply visit the [Web Accessibility Evaluation Tool (WAVE)](https://wave.webaim.org/) and enter a url under "Web page address:" and press return. The site will launch a helpful overlay on top of your specified url, highlighting accessibility alerts, warnings and features. There is also a sidebar helpfully explaining why the various alerts are important and what can be done to resolve them.

Unless you have managed to host a Shiny application on a service such as shinyapps.io, unfortunately you won't have a url to pass to WAVE. Working locally on your machine, your locally hosted app interface will launch with a url like: http://localhost:... There is another way to use WAVE to check localhost sites. Using the [WAVE browser extensions](https://wave.webaim.org/extension/) will allow you to launch the WAVE tool within any of your browser windows. This would allow you to run these checks locally on your machine while also ensuring that your app looks good on Chrome, Firefox or Edge. When checking basic Python Shiny apps for accessibility, one of the common accessibility errors you will encounter will be:

::: {.callout-caution}

### Language missing or invalid
The language of the document is not identified or a lang attribute value is invalid.

:::

This is a bit of a frustrating accessibility error that is a bit of a hangover from RShiny. It means a screen reader may not detect the language of the website content and may not work properly. The ideal scenario would be that Shiny would ask you to specify the language of the application that you are working in at the point where you create the application. It's a straight forward fix though. We can include some tags at the top of our ui that will update the webpage content with the required information:

```{python eval=FALSE}

from shiny import ui, render, App, reactive

app_ui = ui.page_fluid(
    # Add a header and specify the language and title.
    ui.tags.header(ui.tags.html(lang="en"), ui.tags.title("A Really Basic App")),

    ui.input_text(
        id="name_entry",
        label="Please enter your name",
        placeholder="Your name here"
        ),
    ui.input_action_button(id="go_button", label="Click to run..."),
    ui.tags.br(),
    ui.tags.br(),

    ui.output_text_verbatim("greeting"),
)

def server(input, output, session):
    @output
    @render.text
    @reactive.event(input.go_button)
    def greeting():
        return f"Hi {input.name_entry()}, welcome to Python Shiny."

app = App(app_ui, server)

print(dir(ui.tags))

```


Debugging statement.

Missing commas

***

## A Year's Progress


### Reactivity


### Modular Dashboard

***

## The Shiny Ecosystem

A nostalgic look at RShiny ecosystem.

### Python Shiny Add-ins

### Python Shiny Wishlist

### Shinyhelper

#### Shinytest

#### DT tables

#### Golem

#### Reactlog

***

## In Review

Final thoughts & sign off
